{"version":3,"sources":["../src/clientConfig.ts","../src/helpers/environment.ts","../src/responseError.ts","../src/helpers/fetchHelper.ts","../src/templateUrl.ts","../src/version.ts","../src/shopperOrders.ts"],"sourcesContent":["/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport type { BaseUriParameters } from './helpers/types';\n\n/**\n * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate\n * it from the `RequestInit` provided by node-fetch.\n */\ntype BrowserRequestInit = RequestInit;\n/**\n * Any properties supported in either the browser or node are accepted.\n * Using the right properties in the right context is left to the user.\n */\nexport type FetchOptions =  BrowserRequestInit;\n\n/**\n * Base options that can be passed to the `ClientConfig` class.\n */\nexport interface ClientConfigInit<Params extends BaseUriParameters> {\n  baseUri?: string;\n  proxy?: string;\n  headers?: {[key: string]: string};\n  parameters: Params;\n  fetchOptions?: FetchOptions;\n  transformRequest?: (\n    data: unknown,\n    headers: {[key: string]: string}\n  ) => Required<FetchOptions>['body'];\n  throwOnBadResponse?: boolean;\n}\n\nexport type FetchFunction = (\n  input: RequestInfo,\n  init?: FetchOptions | undefined\n) => Promise<Response>;\n\n/**\n * Configuration parameters common to Commerce SDK clients\n */\nexport default class ClientConfig<Params extends BaseUriParameters>\n  implements ClientConfigInit<Params>\n{\n  public baseUri?: string;\n\n  public proxy?: string;\n\n  public headers: {[key: string]: string};\n\n  public parameters: Params;\n\n  public fetchOptions: FetchOptions;\n\n  public transformRequest: NonNullable<\n    ClientConfigInit<Params>['transformRequest']\n  >;\n\n  public throwOnBadResponse: boolean;\n\n  constructor(config: ClientConfigInit<Params>) {\n    this.headers = {...config.headers};\n    this.parameters = {...config.parameters};\n    // shortCode is required in the type, but we still check that it is present for the JS users\n    if (!this.parameters.shortCode) {\n      throw new Error('Missing required parameter: shortCode');\n    }\n    this.fetchOptions = {\n      credentials: 'omit',\n      ...config.fetchOptions,\n    };\n    this.transformRequest =\n      config.transformRequest || ClientConfig.defaults.transformRequest;\n\n    // Optional properties\n    if (config.baseUri) {\n      this.baseUri = config.baseUri;\n    }\n    if (config.proxy) {\n      this.proxy = config.proxy;\n    }\n    this.throwOnBadResponse = !!config.throwOnBadResponse;\n  }\n\n  static readonly defaults: Pick<\n    Required<ClientConfigInit<never>>,\n    'transformRequest'\n  > = {\n    /**\n     * If the `Content-Type` header is `application/json`, the data is converted to a JSON string.\n     * If the `Content-Type` header is `application/x-www-form-urlencoded`, the data is converted to\n     * a `URLSearchParams` object.\n     * In all other cases, the data is returned unmodified.\n     * @param data - Data to transform\n     * @returns A payload appropriate for the specified `Content-Type` header\n     */\n    transformRequest(data, headers) {\n      switch (headers['Content-Type']) {\n        case 'application/json': {\n          return JSON.stringify(data);\n        }\n        case 'application/x-www-form-urlencoded': {\n          // Only SLAS uses this content type, and all of their payloads are Record<string, string>.\n          // Future APIs are unlikely to use this content type. Additionally, URLSearchParams\n          // actually accepts Record<string, unknown> and converts the values to strings.\n          // Therefore, this type assertion isn't *strictly* safe, but is unlikely to cause issues.\n          return new URLSearchParams(data as Record<string, string>);\n        }\n        default: {\n          // This type assertion isn't safe. However, this default case will not occur with the\n          // currently known APIs, as they all use a Content-Type already specified. Rather than\n          // throwing in this case, we return the data unmodified, to be more flexible in case there\n          // are different content types in future APIs.\n          return data as Required<FetchOptions>['body'];\n        }\n      }\n    },\n  };\n}\n","/*\n * Copyright (c) 2023, Salesforce, Inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport type { FetchFunction } from \"../clientConfig\";\n\n/*\n * Copyright (c) 2022, Salesforce, Inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nexport const isBrowser =\n  typeof window === \"object\" && typeof window.document === \"object\";\n\nexport const globalObject = isBrowser ? window : globalThis;\n\nexport const hasFetchAvailable = typeof globalObject.fetch === \"function\";\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\nexport const fetch: FetchFunction = (() => {\n  return globalObject.fetch;\n})();\n","/*\n * Copyright (c) 2022, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * Extends the Error class with the the error being a combination of status code\n * and text retrieved from the response.\n *\n * @class ResponseError\n * @extends Error\n */\nexport default class ResponseError extends Error {\n  constructor(public response: Response) {\n    super(`${response.status} ${response.statusText}`);\n  }\n}\n","/*\n * Copyright (c) 2024, Salesforce, Inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport { BaseUriParameters } from '.';\nimport type { FetchOptions } from '../clientConfig';\nimport { ClientConfigInit } from '../clientConfig';\nimport ResponseError from '../responseError';\nimport { fetch } from './environment';\n\n/**\n * A wrapper function around fetch designed for making requests using the SDK\n * @param url - The url of the resource that you wish to fetch\n * @param options? - An object containing any custom settings you want to apply to the request\n * @param options.method? - The request HTTP operation. 'GET' is the default if no method is provided.\n * @param options.headers? - Headers that are added to the request. Authorization header should be in this argument or in the clientConfig.headers\n * @param options.body? - Body that is used for the request\n * @param clientConfig? - Client Configuration object used by the SDK with properties that can affect the fetch call\n * @param clientConfig.headers? - Additional headers that are added to the request. Authorization header should be in this argument or in the options?.headers. options?.headers will override any duplicate properties.\n * @param clientConfig.fetchOptions? - fetchOptions that are passed onto the fetch request\n * @param clientConfig.throwOnBadResponse? - flag that when set true will throw a response error if the fetch request fails\n * @param rawResponse? - Flag to return the raw response from the fetch call. True for raw response object, false for the data from the response\n * @returns Raw response or data from response based on rawResponse argument from fetch call\n */\n// eslint-disable-next-line import/prefer-default-export\nexport const doFetch = async <Params extends BaseUriParameters>(\n  url: string,\n  options?: {\n    method?: string;\n    headers?: {\n      authorization?: string;\n    } & {[key: string]: string};\n    body?: BodyInit | globalThis.BodyInit | unknown;\n  },\n  clientConfig?: ClientConfigInit<Params>,\n  rawResponse?: boolean\n): Promise<Response | unknown> => {\n  const headers: Record<string, string> = {\n    ...clientConfig?.headers,\n    ...options?.headers,\n  };\n\n  const requestOptions: FetchOptions = {\n    ...clientConfig?.fetchOptions,\n    headers,\n    body: options?.body as\n      | (BodyInit & (globalThis.BodyInit | null))\n      | undefined,\n    method: options?.method ?? 'GET',\n  };\n\n  const response = await fetch(url, requestOptions);\n  if (rawResponse) {\n    return response;\n  }\n  if (\n    clientConfig?.throwOnBadResponse &&\n    !response.ok &&\n    response.status !== 304\n  ) {\n    throw new ResponseError(response);\n  } else {\n    const text = await response.text();\n    // It's ideal to get \"{}\" for an empty response body, but we won't throw if it's truly empty\n    return (text ? JSON.parse(text) : {}) as unknown | Response;\n  }\n};\n","/*\n * Copyright (c) 2020, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport type {PathParameters, QueryParameters} from './helpers/types';\n\nexport default class TemplateURL extends URL {\n  /**\n   * @param url -\n   * @param base -\n   */\n  constructor(\n    url: string,\n    base: string,\n    parameters?: {\n      pathParams?: PathParameters;\n      queryParams?: QueryParameters;\n      origin?: string;\n    }\n  ) {\n    super(\n      TemplateURL.renderTemplateUri(\n        `${base}/${url}`.replace(/\\/\\/+/g, '/'),\n        parameters?.pathParams\n      )\n    );\n    this.addQueryParams(parameters?.queryParams);\n    if (parameters?.origin) {\n      this.replaceOrigin(parameters?.origin);\n    }\n  }\n\n  /**\n   * Replace the origin (protocol/host) portion of the URL with a new origin.\n   * The path portion is retained and concatenated with any path included in the\n   * new origin. Thee primary use of this function is to use a proxy.\n   *\n   * @param newOriginString - The new origin to substitute (ex: https://example.com)\n   */\n  replaceOrigin(newOriginString: string): void {\n    const newOriginUrl = new URL(newOriginString);\n    this.protocol = newOriginUrl.protocol;\n    this.host = newOriginUrl.host;\n    this.pathname = `${newOriginUrl.pathname}/${this.pathname}`.replace(\n      /\\/\\/+/g,\n      '/'\n    );\n  }\n\n  /**\n   * Add append an object literal of query parameters to the URL object. SCAPI expects\n   * Arrays to be comma separated where \\{ a: [\"1\", \"2\"] \\} becomes ?a=1,2.\n   * The 'refine' query parameter is an exception, where SCAPI expects the the \"repeat\"\n   * convention where \\{ refine: [\"1\", \"2\"] \\} becomes \"?refine=1&refine=2\"\n   */\n  addQueryParams(queryParams?: QueryParameters): void {\n    if (queryParams) {\n      Object.keys(queryParams).forEach(key => {\n        const param = queryParams[key];\n        if (Array.isArray(param)) {\n          if (key === 'refine') {\n            for (let i = 0; i < param.length; i += 1) {\n              this.searchParams.append(key, String(param[i]));\n            }\n          } else {\n            this.searchParams.append(key, param.join());\n          }\n        } else {\n          this.searchParams.append(key, String(param));\n        }\n      });\n    }\n  }\n\n  /**\n   * Replace bracketed URL template parameters with values from parameters object\n   *\n   * @param template - The URL template string to make substitutions in\n   * @param parameters - The object literal that provides the values to substitute\n   *\n   * @returns String URL with substitutions made\n   */\n  static renderTemplateUri(\n    template: string,\n    parameters?: PathParameters\n  ): string {\n    return parameters\n      ? template.replace(\n          /\\{([^\\}]+)\\}/g /* eslint-disable-line no-useless-escape */,\n          (match, param: string) => String(parameters[param])\n        )\n      : template;\n  }\n}\n","export const USER_AGENT_HEADER = \"user-agent\";\nexport const USER_AGENT_VALUE = \"commerce-sdk-isomorphic@3.1.1\";\n","import ClientConfig, { ClientConfigInit } from \"./clientConfig\";\n// Must not import from ./helpers/index to avoid circular dependency via ShopperLogin\nimport { isBrowser } from \"./helpers/environment\";\nimport { doFetch } from \"./helpers/fetchHelper\";\nimport type {\n  BaseUriParameters,\n  CompositeParameters,\n  RequireParametersUnlessAllAreOptional\n} from \"./helpers/types\";\nimport TemplateURL from \"./templateUrl\";\nimport { USER_AGENT_HEADER, USER_AGENT_VALUE } from \"./version\";\n\nexport type ErrorResponse = {\n  type: string;\n  title?: string;\n  detail?: string;\n  instance?: string;\n} & { [key: string]: any }\n\n  type LocaleSpecific = { [key: string]: any }\nexport type Money = {\n  currencyMnemonic?: string;\n  value?: number;\n} & { [key: string]: any }\n\n  export type SimpleSearchResult = {\n  limit: number;\n  hits?: Array<object>;\n  offset: any;\n  total: any;\n} & { [key: string]: any }\n\n  export type SearchRequest = {\n  limit?: number;\n  query: Query;\n  sorts?: Array<Sort>;\n  offset?: any;\n} & { [key: string]: any }\n\n  export type PropertyDefinition = {\n  defaultValue?: PropertyValueDefinition;\n  id?: string;\n  name: L10nString;\n  description: L10nString;\n  key?: boolean;\n  localizable?: boolean;\n  mandatory?: boolean;\n  max?: number;\n  minLength?: number;\n  min?: number;\n  multiValueType?: boolean;\n  regularExpression?: string;\n  scale?: number;\n  searchable?: boolean;\n  siteSpecific?: boolean;\n  system?: boolean;\n  unit?: L10nString;\n  possibleValues?: Array<PropertyValueDefinition>;\n  type: string;\n  visible?: boolean;\n} & { [key: string]: any }\n\n  export type LocalizedString = {\n} & { [key: string]: any }\n\n  export type PaginatedSearchResult = {\n  query: Query;\n  sorts?: Array<Sort>;\n  limit: number;\n  hits?: Array<object>;\n  offset: any;\n  total: any;\n} & { [key: string]: any }\n\n  export type ClosedObject = {\n} & { [key: string]: any }\n\n  export type OpenObject = {\n} & { [key: string]: any }\n\n  type QueryParamsLimit = { [key: string]: any }\ntype QueryParamsOffset = { [key: string]: any }\ntype SiteSpecific = { [key: string]: any }\ntype Selectable = { [key: string]: any }\nexport type NoPropertiesAllowed = {\n}\n  export type SpecifiedPropertiesAllowed = {\n} & { [key: string]: any }\n\n  export type BoolFilter = {\n  filters?: Array<Filter>;\n  operator: string;\n} & { [key: string]: any }\n\n  export type PaginatedSearchResultBase = {\n  query: Query;\n  sorts?: Array<Sort>;\n  limit: number;\n  hits?: Array<object>;\n  offset: any;\n  total: any;\n} & { [key: string]: any }\n\n  export type MatchAllQuery = {\n} & { [key: string]: any }\n\n  export type FilteredQuery = {\n  filter: Filter;\n  query: Query;\n} & { [key: string]: any }\n\n  export type QueryFilter = {\n  query: Query;\n} & { [key: string]: any }\n\n  export type Query = {\n  boolQuery?: BoolQuery;\n  filteredQuery?: FilteredQuery;\n  matchAllQuery?: MatchAllQuery;\n  nestedQuery?: NestedQuery;\n  termQuery?: TermQuery;\n  textQuery?: TextQuery;\n} & { [key: string]: any }\n\n  export type TermQuery = {\n  fields: Array<string>;\n  operator: string;\n  values?: Array<any>;\n} & { [key: string]: any }\n\n  export type TermFilter = {\n  field: string;\n  operator: string;\n  values?: Array<any>;\n} & { [key: string]: any }\n\n  export type TextQuery = {\n  fields: Array<string>;\n  searchPhrase: string;\n} & { [key: string]: any }\n\n  export type Range2Filter = {\n  filterMode?: string;\n  fromField: string;\n  fromInclusive?: boolean;\n  fromValue?: any;\n  toField: string;\n  toInclusive?: boolean;\n  toValue?: any;\n} & { [key: string]: any }\n\n  export type BoolQuery = {\n  must?: Array<Query>;\n  mustNot?: Array<Query>;\n  should?: Array<Query>;\n} & { [key: string]: any }\n\n  export type SimpleSearchResultBase = {\n  limit: number;\n  hits?: Array<object>;\n  offset: any;\n  total: any;\n} & { [key: string]: any }\n\n  export type NestedQuery = {\n  path: string;\n  query: Query;\n  scoreMode?: string;\n} & { [key: string]: any }\n\n  export type Filter = {\n  boolFilter?: BoolFilter;\n  queryFilter?: QueryFilter;\n  range2Filter?: Range2Filter;\n  rangeFilter?: RangeFilter;\n  termFilter?: TermFilter;\n} & { [key: string]: any }\n\n  export type Sort = {\n  field: string;\n  sortOrder?: string;\n} & { [key: string]: any }\n\n  export type RangeFilter = {\n  field: string;\n  from?: any;\n  fromInclusive?: boolean;\n  to?: any;\n  toInclusive?: boolean;\n} & { [key: string]: any }\n\n  export type SearchRequestBase = {\n  limit?: number;\n  query: Query;\n  sorts?: Array<Sort>;\n  offset?: any;\n} & { [key: string]: any }\n\n  export type MoneyMnemonic = {\n  currencyMnemonic?: string;\n  value?: number;\n} & { [key: string]: any }\n\n  export type L10nString = {\n} & { [key: string]: any }\n\n  export type AttributeDefinition = {\n  defaultValue?: PropertyValueDefinition;\n  id?: string;\n  name: L10nString;\n  description: L10nString;\n  key?: boolean;\n  localizable?: boolean;\n  mandatory?: boolean;\n  max?: number;\n  minLength?: number;\n  min?: number;\n  multiValueType?: boolean;\n  regularExpression?: string;\n  scale?: number;\n  searchable?: boolean;\n  siteSpecific?: boolean;\n  system?: boolean;\n  unit?: L10nString;\n  possibleValues?: Array<PropertyValueDefinition>;\n  type: string;\n  visible?: boolean;\n}\n  export type PropertyValueDefinition = {\n  description: L10nString;\n  displayValue: L10nString;\n  id: string;\n  position?: number;\n  value: string;\n}\n  export type TaxItems = {\n  taxItems?: Array<TaxItem>;\n} & { [key: string]: any }\n\n  export type PaymentCardSpec = {\n  cardType?: string;\n  checksumVerificationEnabled?: boolean;\n  description?: string;\n  image?: string;\n  name?: string;\n  numberLengths?: Array<string>;\n  numberPrefixes?: Array<string>;\n  securityCodeLength?: number;\n} & { [key: string]: any }\n\n  export type OrderAddress = {\n  address1?: string;\n  address2?: string;\n  city?: string;\n  companyName?: string;\n  countryCode?: string;\n  firstName?: string;\n  fullName?: string;\n  id?: string;\n  jobTitle?: string;\n  lastName?: string;\n  phone?: string;\n  postBox?: string;\n  postalCode?: string;\n  salutation?: string;\n  secondName?: string;\n  stateCode?: string;\n  suffix?: string;\n  suite?: string;\n  title?: string;\n} & { [key: string]: any }\n\n  export type PriceAdjustmentRequest = {\n  discount?: DiscountRequest;\n  itemId?: string;\n  itemText?: string;\n  level: string;\n  promotionId?: string;\n  reasonCode?: string;\n} & { [key: string]: any }\n\n  export type PaymentCard = {\n  cardType?: string;\n  creditCardExpired?: boolean;\n  creditCardToken?: string;\n  expirationMonth?: number;\n  expirationYear?: number;\n  holder?: string;\n  issueNumber?: string;\n  maskedNumber?: string;\n  numberLastDigits?: string;\n  validFromMonth?: number;\n  validFromYear?: number;\n}\n  export type NotesResult = {\n  notes?: Array<Note>;\n} & { [key: string]: any }\n\n  export type ShippingItem = {\n  adjustedTax?: number;\n  basePrice?: number;\n  itemId?: string;\n  itemText?: string;\n  price?: number;\n  priceAdjustments?: Array<PriceAdjustment>;\n  priceAfterItemDiscount?: number;\n  shipmentId?: string;\n  tax?: number;\n  taxBasis?: number;\n  taxClassId?: string;\n  taxRate?: number;\n} & { [key: string]: any }\n\n  export type Discount = {\n  amount?: number;\n  percentage?: number;\n  priceBookId?: string;\n  type: string;\n} & { [key: string]: any }\n\n  export type Note = {\n  createdBy?: string;\n  creationDate?: any;\n  id?: string;\n  subject?: string;\n  text?: string;\n}\n  export type CouponItem = {\n  code: string;\n  couponItemId?: string;\n  statusCode?: string;\n  valid?: boolean;\n} & { [key: string]: any }\n\n  export type PromotionLink = {\n  calloutMsg?: string;\n  name?: string;\n  promotionId?: string;\n  title?: string;\n}\n  export type PriceBookIds = Array<string>;\n\n  export type ShippingPromotion = {\n  calloutMsg?: string;\n  promotionId?: string;\n  promotionName?: string;\n} & { [key: string]: any }\n\n  export type ProductItem = {\n  adjustedTax?: number;\n  basePrice?: number;\n  bonusDiscountLineItemId?: string;\n  bonusProductLineItem?: boolean;\n  bundledProductItems?: Array<ProductItem>;\n  gift?: boolean;\n  giftMessage?: string;\n  inventoryId?: string;\n  itemId?: string;\n  itemText?: string;\n  optionItems?: Array<OptionItem>;\n  price?: number;\n  priceAdjustments?: Array<PriceAdjustment>;\n  priceAfterItemDiscount?: number;\n  priceAfterOrderDiscount?: number;\n  productId?: string;\n  productListItem?: ProductListItemReference;\n  productName?: string;\n  quantity?: number;\n  shipmentId?: string;\n  shippingItemId?: string;\n  tax?: number;\n  taxBasis?: number;\n  taxClassId?: string;\n  taxRate?: number;\n} & { [key: string]: any }\n\n  export type BasketPaymentInstrumentRequest = {\n  amount?: number;\n  bankRoutingNumber?: string;\n  giftCertificateCode?: string;\n  paymentCard?: OrderPaymentCardRequest;\n  paymentMethodId?: string;\n} & { [key: string]: any }\n\n  export type Taxes = {\n  taxes: {\n} & { [key: string]: any }\n;\n}\n  export type OrderPaymentInstrument = {\n  amount?: number;\n  authorizationStatus?: Status;\n  bankRoutingNumber?: string;\n  maskedGiftCertificateCode?: string;\n  paymentCard?: PaymentCard;\n  paymentInstrumentId?: string;\n  paymentMethodId?: string;\n} & { [key: string]: any }\n\n  export type BonusDiscountLineItem = {\n  bonusProducts?: Array<ProductDetailsLink>;\n  couponCode?: string;\n  id?: string;\n  maxBonusItems?: number;\n  promotionId?: string;\n} & { [key: string]: any }\n\n  export type PaymentMethodResult = {\n  applicablePaymentMethods?: Array<PaymentMethod>;\n} & { [key: string]: any }\n\n  export type Shipment = {\n  adjustedMerchandizeTotalTax?: number;\n  adjustedShippingTotalTax?: number;\n  gift?: boolean;\n  giftMessage?: string;\n  merchandizeTotalTax?: number;\n  productSubTotal?: number;\n  productTotal?: number;\n  shipmentId?: string;\n  shipmentNo?: string;\n  shipmentTotal?: number;\n  shippingAddress?: OrderAddress;\n  shippingMethod?: ShippingMethod;\n  shippingStatus?: string;\n  shippingTotal?: number;\n  shippingTotalTax?: number;\n  taxTotal?: number;\n  trackingNumber?: string;\n} & { [key: string]: any }\n\n  export type CustomerInfo = {\n  customerId?: string;\n  customerName?: string;\n  customerNo?: string;\n  email: string;\n} & { [key: string]: any }\n\n  export type SimpleLink = {\n}\n  export type PriceAdjustment = {\n  appliedDiscount?: Discount;\n  couponCode?: string;\n  createdBy?: string;\n  creationDate?: any;\n  custom?: boolean;\n  itemText?: string;\n  lastModified?: any;\n  manual?: boolean;\n  price?: number;\n  priceAdjustmentId?: string;\n  promotionId?: string;\n  promotionLink?: string;\n  reasonCode?: string;\n} & { [key: string]: any }\n\n  export type ShippingMethodResult = {\n  applicableShippingMethods?: Array<ShippingMethod>;\n  defaultShippingMethodId?: string;\n} & { [key: string]: any }\n\n  export type ProductDetailsLink = {\n  productDescription?: string;\n  productId: string;\n  productName?: string;\n  title?: string;\n}\n  export type OptionItem = {\n  adjustedTax?: number;\n  basePrice?: number;\n  bonusDiscountLineItemId?: string;\n  bonusProductLineItem?: boolean;\n  bundledProductItems?: Array<ProductItem>;\n  gift?: boolean;\n  giftMessage?: string;\n  inventoryId?: string;\n  itemId?: string;\n  itemText?: string;\n  optionId: string;\n  optionItems?: Array<OptionItem>;\n  optionValueId: string;\n  price?: number;\n  priceAdjustments?: Array<PriceAdjustment>;\n  priceAfterItemDiscount?: number;\n  priceAfterOrderDiscount?: number;\n  productId?: string;\n  productListItem?: ProductListItemReference;\n  productName?: string;\n  quantity?: number;\n  shipmentId?: string;\n  shippingItemId?: string;\n  tax?: number;\n  taxBasis?: number;\n  taxClassId?: string;\n  taxRate?: number;\n} & { [key: string]: any }\n\n  export type ShippingMethod = {\n  description?: string;\n  externalShippingMethod?: string;\n  id: string;\n  name?: string;\n  price?: number;\n  shippingPromotions?: Array<ShippingPromotion>;\n} & { [key: string]: any }\n\n  export type DiscountRequest = {\n  type: string;\n  value: number;\n}\n  export type Basket = {\n  adjustedMerchandizeTotalTax?: number;\n  adjustedShippingTotalTax?: number;\n  agentBasket?: boolean;\n  basketId?: string;\n  billingAddress?: OrderAddress;\n  bonusDiscountLineItems?: Array<BonusDiscountLineItem>;\n  channelType?: string;\n  couponItems?: Array<CouponItem>;\n  creationDate?: any;\n  currency?: string;\n  customerInfo?: CustomerInfo;\n  giftCertificateItems?: Array<GiftCertificateItem>;\n  groupedTaxItems?: Array<GroupedTaxItem>;\n  inventoryReservationExpiry?: any;\n  lastModified?: any;\n  merchandizeTotalTax?: number;\n  notes?: SimpleLink;\n  orderPriceAdjustments?: Array<PriceAdjustment>;\n  orderTotal?: number;\n  paymentInstruments?: Array<OrderPaymentInstrument>;\n  productItems?: Array<ProductItem>;\n  productSubTotal?: number;\n  productTotal?: number;\n  shipments?: Array<Shipment>;\n  shippingItems?: Array<ShippingItem>;\n  shippingTotal?: number;\n  shippingTotalTax?: number;\n  sourceCode?: string;\n  taxTotal?: number;\n  taxation?: string;\n  taxRoundedAtGroup?: boolean;\n  temporaryBasket?: boolean;\n} & { [key: string]: any }\n\n  export type OrderLookupRequest = {\n  email: string;\n  orderViewCode: string;\n}\n  export type OrderPaymentInstrumentRequest = {\n  amount?: number;\n  bankRoutingNumber?: string;\n  giftCertificateCode?: string;\n  paymentCard?: OrderPaymentCardRequest;\n  paymentMethodId?: string;\n} & { [key: string]: any }\n\n  export type GiftCertificateItem = {\n  amount: number;\n  giftCertificateItemId?: string;\n  message?: string;\n  recipientEmail: string;\n  recipientName?: string;\n  senderName?: string;\n  shipmentId?: string;\n} & { [key: string]: any }\n\n  export type ProductListLink = {\n  description?: string;\n  name?: string;\n  public?: boolean;\n  title?: string;\n  type?: string;\n} & { [key: string]: any }\n\n  export type GroupedTaxItem = {\n  taxRate?: number;\n  taxValue?: number;\n}\n  export type Order = {\n  adjustedMerchandizeTotalTax?: number;\n  adjustedShippingTotalTax?: number;\n  billingAddress?: OrderAddress;\n  bonusDiscountLineItems?: Array<BonusDiscountLineItem>;\n  channelType?: string;\n  confirmationStatus?: string;\n  couponItems?: Array<CouponItem>;\n  createdBy?: string;\n  creationDate?: any;\n  currency?: string;\n  customerInfo?: CustomerInfo;\n  customerName?: string;\n  exportStatus?: string;\n  externalOrderStatus?: string;\n  giftCertificateItems?: Array<GiftCertificateItem>;\n  globalPartyId?: string;\n  groupedTaxItems?: Array<GroupedTaxItem>;\n  guest?: boolean;\n  lastModified?: any;\n  merchandizeTotalTax?: number;\n  notes?: SimpleLink;\n  orderNo?: string;\n  orderPriceAdjustments?: Array<PriceAdjustment>;\n  orderToken?: string;\n  orderTotal?: number;\n  orderViewCode?: string;\n  paymentInstruments?: Array<OrderPaymentInstrument>;\n  paymentStatus?: string;\n  productItems?: Array<ProductItem>;\n  productSubTotal?: number;\n  productTotal?: number;\n  shipments?: Array<Shipment>;\n  shippingItems?: Array<ShippingItem>;\n  shippingStatus?: string;\n  shippingTotal?: number;\n  shippingTotalTax?: number;\n  siteId?: string;\n  sourceCode?: string;\n  status?: string;\n  taxRoundedAtGroup?: boolean;\n  taxTotal?: number;\n  taxation?: string;\n} & { [key: string]: any }\n\n  export type OrderPaymentCardRequest = {\n  cardType?: string;\n  creditCardToken?: string;\n  expirationMonth?: number;\n  expirationYear?: number;\n  holder?: string;\n  issueNumber?: string;\n  maskedNumber?: string;\n  validFromMonth?: number;\n  validFromYear?: number;\n}\n  export type PaymentMethod = {\n  cards?: Array<PaymentCardSpec>;\n  description?: string;\n  id: string;\n  image?: string;\n  name?: string;\n  paymentProcessorId?: string;\n} & { [key: string]: any }\n\n  export type TaxItem = {\n  id: string;\n  rate: number;\n  value?: number;\n}\n  export type Status = {\n  code?: string;\n  message?: string;\n  status?: number;\n}\n  export type ProductListItemReference = {\n  id: string;\n  priority?: number;\n  productDetailsLink?: ProductDetailsLink;\n  productList?: ProductListLink;\n  public?: boolean;\n  purchasedQuantity?: number;\n  quantity?: number;\n  type?: string;\n}\n  export type ChangeControlled = {\n  creationDate?: any;\n  modificationDate?: any;\n  createdBy?: string;\n  lastModifiedBy?: string;\n} & { [key: string]: any }\n\n  type DateRangeFilter = { [key: string]: any }\ntype EtagResponse = { [key: string]: any }\ntype IntegerRangeFilter = { [key: string]: any }\ntype RateLimited3 = { [key: string]: any }\ntype SyncCreated = { [key: string]: any }\ntype DateConditionalRequest = { [key: string]: any }\ntype RateLimited5 = { [key: string]: any }\ntype EtagConditionalRequest = { [key: string]: any }\ntype AsyncCreated = { [key: string]: any }\ntype RateLimited = { [key: string]: any }\ntype RateLimited2 = { [key: string]: any }\ntype OffsetPaginated = { [key: string]: any }\ntype RateLimited4 = { [key: string]: any }\ntype NumericRangeFilter = { [key: string]: any }\ntype DatetimeRangeFilter = { [key: string]: any }\nexport type ChangeControlledDataType = {\n  creationDate?: any;\n  modificationDate?: any;\n  createdBy?: string;\n  lastModifiedBy?: string;\n} & { [key: string]: any }\n\n  export type Error = {\n  type: string;\n  title?: string;\n  detail?: string;\n  instance?: string;\n} & { [key: string]: any }\n\n  \n/**\n * All path parameters that are used by at least one ShopperOrders method.\n */\nexport type ShopperOrdersPathParameters = {\n  organizationId?: string;\n  orderNo?: string;\n  paymentInstrumentId?: string;\n}\n/**\n * All query parameters that are used by at least one ShopperOrders method.\n */\nexport type ShopperOrdersQueryParameters = {\n  siteId?: string;\n  locale?: string;\n}\n\n/**\n * All parameters that are used by ShopperOrders.\n */\nexport type ShopperOrdersParameters = ShopperOrdersPathParameters & BaseUriParameters & ShopperOrdersQueryParameters;\n\n/**\n* [Shopper Orders](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-orders:Summary)\n* ==================================\n*\n* *Finish the shopper checkout experience resulting in an order.*<br />\n*\n* Simple example:\n*\n* ```typescript\n*   import { ShopperOrders } from \"commerce-sdk-isomorphic\";\n*\n*   const clientConfig = {\n*     parameters: {\n*       clientId: \"XXXXXX\",\n*       organizationId: \"XXXX\",\n*       shortCode: \"XXX\",\n*       siteId: \"XX\"\n*     }\n*   };\n*   const shopperOrdersClient = new ShopperOrders(clientConfig);\n* ```\n*\n* <span style=\"font-size:.7em; display:block; text-align: right\">\n* API Version: 0.4.8<br />\n* Last Updated: <br />\n* </span>\n* \n*\n*/\nexport class ShopperOrders<ConfigParameters extends ShopperOrdersParameters & Record<string, unknown>> {\n  // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor\n  public clientConfig: ClientConfig<ConfigParameters> & { baseUri: string };\n\n  static readonly defaultBaseUri = \"https://{shortCode}.api.commercecloud.salesforce.com/checkout/shopper-orders/{version}\";\n\n  static readonly apiPaths = {\n    createOrder: \"/organizations/{organizationId}/orders\",\n    getOrder: \"/organizations/{organizationId}/orders/{orderNo}\",\n    guestOrderLookup: \"/organizations/{organizationId}/orders/{orderNo}/lookup\",\n    createPaymentInstrumentForOrder: \"/organizations/{organizationId}/orders/{orderNo}/payment-instruments\",\n    removePaymentInstrumentFromOrder: \"/organizations/{organizationId}/orders/{orderNo}/payment-instruments/{paymentInstrumentId}\",\n    updatePaymentInstrumentForOrder: \"/organizations/{organizationId}/orders/{orderNo}/payment-instruments/{paymentInstrumentId}\",\n    getPaymentMethodsForOrder: \"/organizations/{organizationId}/orders/{orderNo}/payment-methods\",\n    getTaxesFromOrder: \"/organizations/{organizationId}/orders/{orderNo}/taxes\",\n  };\n\n  constructor(config: ClientConfigInit<ConfigParameters>) {\n    const cfg = {...config}\n    if (!cfg.baseUri) cfg.baseUri = new.target.defaultBaseUri;\n    // Type assertion is safe because ^^^\n    this.clientConfig = new ClientConfig(cfg) as ClientConfig<ConfigParameters> & { baseUri: string };\n  }\n\n  static readonly paramKeys = {\n    createOrder: [\n      'organizationId',\n      'siteId',\n      'locale',\n    ],\n    createOrderRequired: [\n      'organizationId',\n      'siteId',\n    ],\n    getOrder: [\n      'organizationId',\n      'orderNo',\n      'siteId',\n      'locale',\n    ],\n    getOrderRequired: [\n      'organizationId',\n      'orderNo',\n      'siteId',\n    ],\n    guestOrderLookup: [\n      'organizationId',\n      'orderNo',\n      'siteId',\n      'locale',\n    ],\n    guestOrderLookupRequired: [\n      'organizationId',\n      'orderNo',\n      'siteId',\n    ],\n    createPaymentInstrumentForOrder: [\n      'organizationId',\n      'orderNo',\n      'siteId',\n      'locale',\n    ],\n    createPaymentInstrumentForOrderRequired: [\n      'organizationId',\n      'orderNo',\n      'siteId',\n    ],\n    removePaymentInstrumentFromOrder: [\n      'organizationId',\n      'orderNo',\n      'paymentInstrumentId',\n      'siteId',\n      'locale',\n    ],\n    removePaymentInstrumentFromOrderRequired: [\n      'organizationId',\n      'orderNo',\n      'paymentInstrumentId',\n      'siteId',\n    ],\n    updatePaymentInstrumentForOrder: [\n      'organizationId',\n      'orderNo',\n      'paymentInstrumentId',\n      'siteId',\n      'locale',\n    ],\n    updatePaymentInstrumentForOrderRequired: [\n      'organizationId',\n      'orderNo',\n      'paymentInstrumentId',\n      'siteId',\n    ],\n    getPaymentMethodsForOrder: [\n      'organizationId',\n      'orderNo',\n      'siteId',\n      'locale',\n    ],\n    getPaymentMethodsForOrderRequired: [\n      'organizationId',\n      'orderNo',\n      'siteId',\n    ],\n    getTaxesFromOrder: [\n      'organizationId',\n      'orderNo',\n      'siteId',\n    ],\n    getTaxesFromOrderRequired: [\n      'organizationId',\n      'orderNo',\n      'siteId',\n    ],\n  } as const;\n  \n      /**\n      * Submits an order based on a prepared basket. The only considered value from the request body is basketId.\n      *\n      * If you would like to get a raw Response object use the other createOrder function.\n      *\n      * @param options - An object containing the options for this method.\n      * @param parameters - An object containing the parameters for this method.\n      * @param organizationId - An identifier for the organization the request is being made by.\n      * @param siteId - \n      * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.\n  Below are some valid examples:\n  - en-US\n  - de-AT\n  - de\n  - default\n      * @param headers - An object literal of key value pairs of the headers to be\n      * sent with this request.\n      * @param body - The data to send as the request body.\n      *\n      * @returns A promise of type Order.\n      * \n      */\n      createOrder(\n        options: RequireParametersUnlessAllAreOptional<{\n          parameters?: CompositeParameters<{\n            organizationId: string\n            siteId: string\n            locale?: string\n          } & { [key in `c_${string}`]: any }, ConfigParameters>,\n          headers?: { [key: string]: string },\n          body: Basket\n        }>\n      ): Promise<Order>;\n  \n      /**\n      * Submits an order based on a prepared basket. The only considered value from the request body is basketId.\n      *\n      * @param options - An object containing the options for this method.\n      * @param parameters - An object containing the parameters for this method.\n      * @param organizationId - An identifier for the organization the request is being made by.\n      * @param siteId - \n      * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.\n  Below are some valid examples:\n  - en-US\n  - de-AT\n  - de\n  - default\n      * @param headers - An object literal of key value pairs of the headers to be\n      * sent with this request.\n      * @param body - The data to send as the request body.\n      * @param rawResponse - Set to true to return entire Response object instead of DTO.\n      * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.\n      * \n      */\n      createOrder<T extends boolean>(\n        options: RequireParametersUnlessAllAreOptional<{\n          parameters?: CompositeParameters<{\n            organizationId: string\n            siteId: string\n            locale?: string\n          } & { [key in `c_${string}`]: any }, ConfigParameters>,\n          headers?: { [key: string]: string },\n          body: Basket\n        }>,\n        rawResponse?: T\n      ): Promise<T extends true ? Response : Order>;\n  \n      /**\n      * Submits an order based on a prepared basket. The only considered value from the request body is basketId.\n      *\n      * @param options - An object containing the options for this method.\n      * @param parameters - An object containing the parameters for this method.\n      * @param organizationId - An identifier for the organization the request is being made by.\n      * @param siteId - \n      * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.\n  Below are some valid examples:\n  - en-US\n  - de-AT\n  - de\n  - default\n      * @param headers - An object literal of key value pairs of the headers to be\n      * sent with this request.\n      * @param body - The data to send as the request body.\n      * @param rawResponse - Set to true to return entire Response object instead of DTO.\n      *\n      * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.\n      * \n      */\n      async createOrder(\n        options: RequireParametersUnlessAllAreOptional<{\n          parameters?: CompositeParameters<{\n            organizationId: string\n            siteId: string\n            locale?: string\n          } & { [key in `c_${string}`]: any }, ConfigParameters>,\n          headers?: { [key: string]: string },\n          body: Basket\n        }>,\n        rawResponse?: boolean\n      ): Promise<Response | Order> {\n        const optionParams = options?.parameters || ({} as Partial<NonNullable<NonNullable<typeof options>[\"parameters\"]>>);\n        const configParams = this.clientConfig.parameters;\n  \n        const pathParams: ShopperOrdersPathParameters & Required<BaseUriParameters> = {\n          shortCode: configParams.shortCode,\n          version: configParams.version || \"v1\"\n        };\n        if (optionParams[\"organizationId\"] !== undefined) {\n          pathParams[\"organizationId\"] = optionParams[\"organizationId\"];\n        } else if (configParams[\"organizationId\"] !== undefined) {\n          pathParams[\"organizationId\"] = configParams[\"organizationId\"];\n        }\n        else {\n          throw new Error('Missing required path parameter: organizationId');\n        }\n  \n        const queryParams: ShopperOrdersQueryParameters & { [key in `c_${string}`]: any } = {};\n        if (optionParams[\"siteId\"] !== undefined) {\n          queryParams[\"siteId\"] = optionParams[\"siteId\"];\n        } else if (configParams[\"siteId\"] !== undefined) {\n          queryParams[\"siteId\"] = configParams[\"siteId\"];\n        }\n        else {\n          throw new Error('Missing required query parameter: siteId');\n        }\n        if (optionParams[\"locale\"] !== undefined) {\n          queryParams[\"locale\"] = optionParams[\"locale\"];\n        } else if (configParams[\"locale\"] !== undefined) {\n          queryParams[\"locale\"] = configParams[\"locale\"];\n        }\n  \n        Object.keys(optionParams).forEach((key) => {\n          if(key.startsWith('c_') && optionParams[key as keyof typeof optionParams] !== undefined) {\n            queryParams[key as keyof typeof queryParams] = optionParams[key as keyof typeof optionParams]\n          } else if(!queryParams.hasOwnProperty(key) && !pathParams.hasOwnProperty(key)) {\n            console.warn(`Invalid Parameter for createOrder: ${key}`)\n          }\n        })\n  \n        const url = new TemplateURL(\n          \"/organizations/{organizationId}/orders\",\n          this.clientConfig.baseUri,\n          {\n            pathParams,\n            queryParams,\n            origin: this.clientConfig.proxy\n          }\n        );\n  \n        const headers: Record<string, string> = {\n          \"Content-Type\": \"application/json\",\n          ...this.clientConfig.headers,\n          ...options?.headers\n        };\n  \n        if (!isBrowser) {\n          // Browsers forbid setting a custom user-agent header\n          headers[USER_AGENT_HEADER] = [headers[USER_AGENT_HEADER], USER_AGENT_VALUE].join(\" \");\n        }\n  \n        const response = await doFetch(\n          url.toString(),\n          {\n            method: \"POST\",\n            headers,\n            body: this.clientConfig.transformRequest(options.body, headers)\n          },\n          this.clientConfig,\n          rawResponse\n        )\n  \n        return response as Response | Order;\n      }\n  \n      /**\n      * Gets information for an order.\n      *\n      * If you would like to get a raw Response object use the other getOrder function.\n      *\n      * @param options - An object containing the options for this method.\n      * @param parameters - An object containing the parameters for this method.\n      * @param organizationId - An identifier for the organization the request is being made by.\n      * @param orderNo - The order number of the order to be modified.\n      * @param siteId - \n      * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.\n  Below are some valid examples:\n  - en-US\n  - de-AT\n  - de\n  - default\n      * @param headers - An object literal of key value pairs of the headers to be\n      * sent with this request.\n      *\n      * @returns A promise of type Order.\n      * \n      */\n      getOrder(\n        options?: RequireParametersUnlessAllAreOptional<{\n          parameters?: CompositeParameters<{\n            organizationId: string\n            orderNo: string\n            siteId: string\n            locale?: string\n          } & { [key in `c_${string}`]: any }, ConfigParameters>,\n          headers?: { [key: string]: string },\n        }>\n      ): Promise<Order>;\n  \n      /**\n      * Gets information for an order.\n      *\n      * @param options - An object containing the options for this method.\n      * @param parameters - An object containing the parameters for this method.\n      * @param organizationId - An identifier for the organization the request is being made by.\n      * @param orderNo - The order number of the order to be modified.\n      * @param siteId - \n      * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.\n  Below are some valid examples:\n  - en-US\n  - de-AT\n  - de\n  - default\n      * @param headers - An object literal of key value pairs of the headers to be\n      * sent with this request.\n      * @param rawResponse - Set to true to return entire Response object instead of DTO.\n      * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.\n      * \n      */\n      getOrder<T extends boolean>(\n        options?: RequireParametersUnlessAllAreOptional<{\n          parameters?: CompositeParameters<{\n            organizationId: string\n            orderNo: string\n            siteId: string\n            locale?: string\n          } & { [key in `c_${string}`]: any }, ConfigParameters>,\n          headers?: { [key: string]: string },\n        }>,\n        rawResponse?: T\n      ): Promise<T extends true ? Response : Order>;\n  \n      /**\n      * Gets information for an order.\n      *\n      * @param options - An object containing the options for this method.\n      * @param parameters - An object containing the parameters for this method.\n      * @param organizationId - An identifier for the organization the request is being made by.\n      * @param orderNo - The order number of the order to be modified.\n      * @param siteId - \n      * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.\n  Below are some valid examples:\n  - en-US\n  - de-AT\n  - de\n  - default\n      * @param headers - An object literal of key value pairs of the headers to be\n      * sent with this request.\n      * @param rawResponse - Set to true to return entire Response object instead of DTO.\n      *\n      * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.\n      * \n      */\n      async getOrder(\n        options?: RequireParametersUnlessAllAreOptional<{\n          parameters?: CompositeParameters<{\n            organizationId: string\n            orderNo: string\n            siteId: string\n            locale?: string\n          } & { [key in `c_${string}`]: any }, ConfigParameters>,\n          headers?: { [key: string]: string },\n        }>,\n        rawResponse?: boolean\n      ): Promise<Response | Order> {\n        const optionParams = options?.parameters || ({} as Partial<NonNullable<NonNullable<typeof options>[\"parameters\"]>>);\n        const configParams = this.clientConfig.parameters;\n  \n        const pathParams: ShopperOrdersPathParameters & Required<BaseUriParameters> = {\n          shortCode: configParams.shortCode,\n          version: configParams.version || \"v1\"\n        };\n        if (optionParams[\"organizationId\"] !== undefined) {\n          pathParams[\"organizationId\"] = optionParams[\"organizationId\"];\n        } else if (configParams[\"organizationId\"] !== undefined) {\n          pathParams[\"organizationId\"] = configParams[\"organizationId\"];\n        }\n        else {\n          throw new Error('Missing required path parameter: organizationId');\n        }\n        if (optionParams[\"orderNo\"] !== undefined) {\n          pathParams[\"orderNo\"] = optionParams[\"orderNo\"];\n        } else if (configParams[\"orderNo\"] !== undefined) {\n          pathParams[\"orderNo\"] = configParams[\"orderNo\"];\n        }\n        else {\n          throw new Error('Missing required path parameter: orderNo');\n        }\n  \n        const queryParams: ShopperOrdersQueryParameters & { [key in `c_${string}`]: any } = {};\n        if (optionParams[\"siteId\"] !== undefined) {\n          queryParams[\"siteId\"] = optionParams[\"siteId\"];\n        } else if (configParams[\"siteId\"] !== undefined) {\n          queryParams[\"siteId\"] = configParams[\"siteId\"];\n        }\n        else {\n          throw new Error('Missing required query parameter: siteId');\n        }\n        if (optionParams[\"locale\"] !== undefined) {\n          queryParams[\"locale\"] = optionParams[\"locale\"];\n        } else if (configParams[\"locale\"] !== undefined) {\n          queryParams[\"locale\"] = configParams[\"locale\"];\n        }\n  \n        Object.keys(optionParams).forEach((key) => {\n          if(key.startsWith('c_') && optionParams[key as keyof typeof optionParams] !== undefined) {\n            queryParams[key as keyof typeof queryParams] = optionParams[key as keyof typeof optionParams]\n          } else if(!queryParams.hasOwnProperty(key) && !pathParams.hasOwnProperty(key)) {\n            console.warn(`Invalid Parameter for getOrder: ${key}`)\n          }\n        })\n  \n        const url = new TemplateURL(\n          \"/organizations/{organizationId}/orders/{orderNo}\",\n          this.clientConfig.baseUri,\n          {\n            pathParams,\n            queryParams,\n            origin: this.clientConfig.proxy\n          }\n        );\n  \n        const headers: Record<string, string> = {\n          ...this.clientConfig.headers,\n          ...options?.headers\n        };\n  \n        if (!isBrowser) {\n          // Browsers forbid setting a custom user-agent header\n          headers[USER_AGENT_HEADER] = [headers[USER_AGENT_HEADER], USER_AGENT_VALUE].join(\" \");\n        }\n  \n        const response = await doFetch(\n          url.toString(),\n          {\n            method: \"GET\",\n            headers,\n            \n          },\n          this.clientConfig,\n          rawResponse\n        )\n  \n        return response as Response | Order;\n      }\n  \n      /**\n      * Use this endpoint to lookup a guest order. \n  \n  **Important**: This endpoint uses the [ShopperTokenTsob](https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-login?meta=security%3AShopperTokenTsob) security scheme. Always check the Security section of the endpoint documentation, which is hidden by default.\n   \n  The API uses the `orderViewCode` generated during the order creation and the `email` of the order customer to lookup a guest order. If email is not provided on the order, the field can be left blank in the lookup request.\n  **Note**: In the no email on order scenario, the custom implementation must include an additional verification of an order attribute. For example, a postal code or mobile number. \n  \n  This API can also be used for looking up an order for a registered customer. In addition to the verification steps used for guest order lookup, the API also verifies that the customer ID of the order matches with the customer ID supplied in the `ShopperTokenTsob`. \n  \n  \n      *\n      * If you would like to get a raw Response object use the other guestOrderLookup function.\n      *\n      * @param options - An object containing the options for this method.\n      * @param parameters - An object containing the parameters for this method.\n      * @param organizationId - An identifier for the organization the request is being made by.\n      * @param orderNo - The order number of the order to be modified.\n      * @param siteId - \n      * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.\n  Below are some valid examples:\n  - en-US\n  - de-AT\n  - de\n  - default\n      * @param headers - An object literal of key value pairs of the headers to be\n      * sent with this request.\n      * @param body - The data to send as the request body.\n      *\n      * @returns A promise of type Order.\n      * \n      */\n      guestOrderLookup(\n        options: RequireParametersUnlessAllAreOptional<{\n          parameters?: CompositeParameters<{\n            organizationId: string\n            orderNo: string\n            siteId: string\n            locale?: string\n          } & { [key in `c_${string}`]: any }, ConfigParameters>,\n          headers?: { [key: string]: string },\n          body: OrderLookupRequest\n        }>\n      ): Promise<Order>;\n  \n      /**\n      * Use this endpoint to lookup a guest order. \n  \n  **Important**: This endpoint uses the [ShopperTokenTsob](https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-login?meta=security%3AShopperTokenTsob) security scheme. Always check the Security section of the endpoint documentation, which is hidden by default.\n   \n  The API uses the `orderViewCode` generated during the order creation and the `email` of the order customer to lookup a guest order. If email is not provided on the order, the field can be left blank in the lookup request.\n  **Note**: In the no email on order scenario, the custom implementation must include an additional verification of an order attribute. For example, a postal code or mobile number. \n  \n  This API can also be used for looking up an order for a registered customer. In addition to the verification steps used for guest order lookup, the API also verifies that the customer ID of the order matches with the customer ID supplied in the `ShopperTokenTsob`. \n  \n  \n      *\n      * @param options - An object containing the options for this method.\n      * @param parameters - An object containing the parameters for this method.\n      * @param organizationId - An identifier for the organization the request is being made by.\n      * @param orderNo - The order number of the order to be modified.\n      * @param siteId - \n      * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.\n  Below are some valid examples:\n  - en-US\n  - de-AT\n  - de\n  - default\n      * @param headers - An object literal of key value pairs of the headers to be\n      * sent with this request.\n      * @param body - The data to send as the request body.\n      * @param rawResponse - Set to true to return entire Response object instead of DTO.\n      * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.\n      * \n      */\n      guestOrderLookup<T extends boolean>(\n        options: RequireParametersUnlessAllAreOptional<{\n          parameters?: CompositeParameters<{\n            organizationId: string\n            orderNo: string\n            siteId: string\n            locale?: string\n          } & { [key in `c_${string}`]: any }, ConfigParameters>,\n          headers?: { [key: string]: string },\n          body: OrderLookupRequest\n        }>,\n        rawResponse?: T\n      ): Promise<T extends true ? Response : Order>;\n  \n      /**\n      * Use this endpoint to lookup a guest order. \n  \n  **Important**: This endpoint uses the [ShopperTokenTsob](https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-login?meta=security%3AShopperTokenTsob) security scheme. Always check the Security section of the endpoint documentation, which is hidden by default.\n   \n  The API uses the `orderViewCode` generated during the order creation and the `email` of the order customer to lookup a guest order. If email is not provided on the order, the field can be left blank in the lookup request.\n  **Note**: In the no email on order scenario, the custom implementation must include an additional verification of an order attribute. For example, a postal code or mobile number. \n  \n  This API can also be used for looking up an order for a registered customer. In addition to the verification steps used for guest order lookup, the API also verifies that the customer ID of the order matches with the customer ID supplied in the `ShopperTokenTsob`. \n  \n  \n      *\n      * @param options - An object containing the options for this method.\n      * @param parameters - An object containing the parameters for this method.\n      * @param organizationId - An identifier for the organization the request is being made by.\n      * @param orderNo - The order number of the order to be modified.\n      * @param siteId - \n      * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.\n  Below are some valid examples:\n  - en-US\n  - de-AT\n  - de\n  - default\n      * @param headers - An object literal of key value pairs of the headers to be\n      * sent with this request.\n      * @param body - The data to send as the request body.\n      * @param rawResponse - Set to true to return entire Response object instead of DTO.\n      *\n      * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.\n      * \n      */\n      async guestOrderLookup(\n        options: RequireParametersUnlessAllAreOptional<{\n          parameters?: CompositeParameters<{\n            organizationId: string\n            orderNo: string\n            siteId: string\n            locale?: string\n          } & { [key in `c_${string}`]: any }, ConfigParameters>,\n          headers?: { [key: string]: string },\n          body: OrderLookupRequest\n        }>,\n        rawResponse?: boolean\n      ): Promise<Response | Order> {\n        const optionParams = options?.parameters || ({} as Partial<NonNullable<NonNullable<typeof options>[\"parameters\"]>>);\n        const configParams = this.clientConfig.parameters;\n  \n        const pathParams: ShopperOrdersPathParameters & Required<BaseUriParameters> = {\n          shortCode: configParams.shortCode,\n          version: configParams.version || \"v1\"\n        };\n        if (optionParams[\"organizationId\"] !== undefined) {\n          pathParams[\"organizationId\"] = optionParams[\"organizationId\"];\n        } else if (configParams[\"organizationId\"] !== undefined) {\n          pathParams[\"organizationId\"] = configParams[\"organizationId\"];\n        }\n        else {\n          throw new Error('Missing required path parameter: organizationId');\n        }\n        if (optionParams[\"orderNo\"] !== undefined) {\n          pathParams[\"orderNo\"] = optionParams[\"orderNo\"];\n        } else if (configParams[\"orderNo\"] !== undefined) {\n          pathParams[\"orderNo\"] = configParams[\"orderNo\"];\n        }\n        else {\n          throw new Error('Missing required path parameter: orderNo');\n        }\n  \n        const queryParams: ShopperOrdersQueryParameters & { [key in `c_${string}`]: any } = {};\n        if (optionParams[\"siteId\"] !== undefined) {\n          queryParams[\"siteId\"] = optionParams[\"siteId\"];\n        } else if (configParams[\"siteId\"] !== undefined) {\n          queryParams[\"siteId\"] = configParams[\"siteId\"];\n        }\n        else {\n          throw new Error('Missing required query parameter: siteId');\n        }\n        if (optionParams[\"locale\"] !== undefined) {\n          queryParams[\"locale\"] = optionParams[\"locale\"];\n        } else if (configParams[\"locale\"] !== undefined) {\n          queryParams[\"locale\"] = configParams[\"locale\"];\n        }\n  \n        Object.keys(optionParams).forEach((key) => {\n          if(key.startsWith('c_') && optionParams[key as keyof typeof optionParams] !== undefined) {\n            queryParams[key as keyof typeof queryParams] = optionParams[key as keyof typeof optionParams]\n          } else if(!queryParams.hasOwnProperty(key) && !pathParams.hasOwnProperty(key)) {\n            console.warn(`Invalid Parameter for guestOrderLookup: ${key}`)\n          }\n        })\n  \n        const url = new TemplateURL(\n          \"/organizations/{organizationId}/orders/{orderNo}/lookup\",\n          this.clientConfig.baseUri,\n          {\n            pathParams,\n            queryParams,\n            origin: this.clientConfig.proxy\n          }\n        );\n  \n        const headers: Record<string, string> = {\n          \"Content-Type\": \"application/json\",\n          ...this.clientConfig.headers,\n          ...options?.headers\n        };\n  \n        if (!isBrowser) {\n          // Browsers forbid setting a custom user-agent header\n          headers[USER_AGENT_HEADER] = [headers[USER_AGENT_HEADER], USER_AGENT_VALUE].join(\" \");\n        }\n  \n        const response = await doFetch(\n          url.toString(),\n          {\n            method: \"POST\",\n            headers,\n            body: this.clientConfig.transformRequest(options.body, headers)\n          },\n          this.clientConfig,\n          rawResponse\n        )\n  \n        return response as Response | Order;\n      }\n  \n      /**\n      * Adds a payment instrument to an order. \n  \n  Details:\n  \n  The payment instrument is added with the provided details. The payment method must be applicable for the order see GET\n  /baskets/\\{basketId\\}/payment-methods, if the payment method is 'CREDIT_CARD' a paymentCard must be specified in the request.\n      *\n      * If you would like to get a raw Response object use the other createPaymentInstrumentForOrder function.\n      *\n      * @param options - An object containing the options for this method.\n      * @param parameters - An object containing the parameters for this method.\n      * @param organizationId - An identifier for the organization the request is being made by.\n      * @param orderNo - The order number of the order to be modified.\n      * @param siteId - \n      * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.\n  Below are some valid examples:\n  - en-US\n  - de-AT\n  - de\n  - default\n      * @param headers - An object literal of key value pairs of the headers to be\n      * sent with this request.\n      * @param body - The data to send as the request body.\n      *\n      * @returns A promise of type Order.\n      * \n      */\n      createPaymentInstrumentForOrder(\n        options: RequireParametersUnlessAllAreOptional<{\n          parameters?: CompositeParameters<{\n            organizationId: string\n            orderNo: string\n            siteId: string\n            locale?: string\n          } & { [key in `c_${string}`]: any }, ConfigParameters>,\n          headers?: { [key: string]: string },\n          body: OrderPaymentInstrumentRequest\n        }>\n      ): Promise<Order>;\n  \n      /**\n      * Adds a payment instrument to an order. \n  \n  Details:\n  \n  The payment instrument is added with the provided details. The payment method must be applicable for the order see GET\n  /baskets/\\{basketId\\}/payment-methods, if the payment method is 'CREDIT_CARD' a paymentCard must be specified in the request.\n      *\n      * @param options - An object containing the options for this method.\n      * @param parameters - An object containing the parameters for this method.\n      * @param organizationId - An identifier for the organization the request is being made by.\n      * @param orderNo - The order number of the order to be modified.\n      * @param siteId - \n      * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.\n  Below are some valid examples:\n  - en-US\n  - de-AT\n  - de\n  - default\n      * @param headers - An object literal of key value pairs of the headers to be\n      * sent with this request.\n      * @param body - The data to send as the request body.\n      * @param rawResponse - Set to true to return entire Response object instead of DTO.\n      * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.\n      * \n      */\n      createPaymentInstrumentForOrder<T extends boolean>(\n        options: RequireParametersUnlessAllAreOptional<{\n          parameters?: CompositeParameters<{\n            organizationId: string\n            orderNo: string\n            siteId: string\n            locale?: string\n          } & { [key in `c_${string}`]: any }, ConfigParameters>,\n          headers?: { [key: string]: string },\n          body: OrderPaymentInstrumentRequest\n        }>,\n        rawResponse?: T\n      ): Promise<T extends true ? Response : Order>;\n  \n      /**\n      * Adds a payment instrument to an order. \n  \n  Details:\n  \n  The payment instrument is added with the provided details. The payment method must be applicable for the order see GET\n  /baskets/\\{basketId\\}/payment-methods, if the payment method is 'CREDIT_CARD' a paymentCard must be specified in the request.\n      *\n      * @param options - An object containing the options for this method.\n      * @param parameters - An object containing the parameters for this method.\n      * @param organizationId - An identifier for the organization the request is being made by.\n      * @param orderNo - The order number of the order to be modified.\n      * @param siteId - \n      * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.\n  Below are some valid examples:\n  - en-US\n  - de-AT\n  - de\n  - default\n      * @param headers - An object literal of key value pairs of the headers to be\n      * sent with this request.\n      * @param body - The data to send as the request body.\n      * @param rawResponse - Set to true to return entire Response object instead of DTO.\n      *\n      * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.\n      * \n      */\n      async createPaymentInstrumentForOrder(\n        options: RequireParametersUnlessAllAreOptional<{\n          parameters?: CompositeParameters<{\n            organizationId: string\n            orderNo: string\n            siteId: string\n            locale?: string\n          } & { [key in `c_${string}`]: any }, ConfigParameters>,\n          headers?: { [key: string]: string },\n          body: OrderPaymentInstrumentRequest\n        }>,\n        rawResponse?: boolean\n      ): Promise<Response | Order> {\n        const optionParams = options?.parameters || ({} as Partial<NonNullable<NonNullable<typeof options>[\"parameters\"]>>);\n        const configParams = this.clientConfig.parameters;\n  \n        const pathParams: ShopperOrdersPathParameters & Required<BaseUriParameters> = {\n          shortCode: configParams.shortCode,\n          version: configParams.version || \"v1\"\n        };\n        if (optionParams[\"organizationId\"] !== undefined) {\n          pathParams[\"organizationId\"] = optionParams[\"organizationId\"];\n        } else if (configParams[\"organizationId\"] !== undefined) {\n          pathParams[\"organizationId\"] = configParams[\"organizationId\"];\n        }\n        else {\n          throw new Error('Missing required path parameter: organizationId');\n        }\n        if (optionParams[\"orderNo\"] !== undefined) {\n          pathParams[\"orderNo\"] = optionParams[\"orderNo\"];\n        } else if (configParams[\"orderNo\"] !== undefined) {\n          pathParams[\"orderNo\"] = configParams[\"orderNo\"];\n        }\n        else {\n          throw new Error('Missing required path parameter: orderNo');\n        }\n  \n        const queryParams: ShopperOrdersQueryParameters & { [key in `c_${string}`]: any } = {};\n        if (optionParams[\"siteId\"] !== undefined) {\n          queryParams[\"siteId\"] = optionParams[\"siteId\"];\n        } else if (configParams[\"siteId\"] !== undefined) {\n          queryParams[\"siteId\"] = configParams[\"siteId\"];\n        }\n        else {\n          throw new Error('Missing required query parameter: siteId');\n        }\n        if (optionParams[\"locale\"] !== undefined) {\n          queryParams[\"locale\"] = optionParams[\"locale\"];\n        } else if (configParams[\"locale\"] !== undefined) {\n          queryParams[\"locale\"] = configParams[\"locale\"];\n        }\n  \n        Object.keys(optionParams).forEach((key) => {\n          if(key.startsWith('c_') && optionParams[key as keyof typeof optionParams] !== undefined) {\n            queryParams[key as keyof typeof queryParams] = optionParams[key as keyof typeof optionParams]\n          } else if(!queryParams.hasOwnProperty(key) && !pathParams.hasOwnProperty(key)) {\n            console.warn(`Invalid Parameter for createPaymentInstrumentForOrder: ${key}`)\n          }\n        })\n  \n        const url = new TemplateURL(\n          \"/organizations/{organizationId}/orders/{orderNo}/payment-instruments\",\n          this.clientConfig.baseUri,\n          {\n            pathParams,\n            queryParams,\n            origin: this.clientConfig.proxy\n          }\n        );\n  \n        const headers: Record<string, string> = {\n          \"Content-Type\": \"application/json\",\n          ...this.clientConfig.headers,\n          ...options?.headers\n        };\n  \n        if (!isBrowser) {\n          // Browsers forbid setting a custom user-agent header\n          headers[USER_AGENT_HEADER] = [headers[USER_AGENT_HEADER], USER_AGENT_VALUE].join(\" \");\n        }\n  \n        const response = await doFetch(\n          url.toString(),\n          {\n            method: \"POST\",\n            headers,\n            body: this.clientConfig.transformRequest(options.body, headers)\n          },\n          this.clientConfig,\n          rawResponse\n        )\n  \n        return response as Response | Order;\n      }\n  \n      /**\n      * Removes a payment instrument of an order.\n      *\n      * If you would like to get a raw Response object use the other removePaymentInstrumentFromOrder function.\n      *\n      * @param options - An object containing the options for this method.\n      * @param parameters - An object containing the parameters for this method.\n      * @param organizationId - An identifier for the organization the request is being made by.\n      * @param orderNo - The order number of the order to be modified.\n      * @param paymentInstrumentId - The ID of the payment instrument to be updated.\n      * @param siteId - \n      * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.\n  Below are some valid examples:\n  - en-US\n  - de-AT\n  - de\n  - default\n      * @param headers - An object literal of key value pairs of the headers to be\n      * sent with this request.\n      *\n      * @returns A promise of type Order.\n      * \n      */\n      removePaymentInstrumentFromOrder(\n        options?: RequireParametersUnlessAllAreOptional<{\n          parameters?: CompositeParameters<{\n            organizationId: string\n            orderNo: string\n            paymentInstrumentId: string\n            siteId: string\n            locale?: string\n          } & { [key in `c_${string}`]: any }, ConfigParameters>,\n          headers?: { [key: string]: string },\n        }>\n      ): Promise<Order>;\n  \n      /**\n      * Removes a payment instrument of an order.\n      *\n      * @param options - An object containing the options for this method.\n      * @param parameters - An object containing the parameters for this method.\n      * @param organizationId - An identifier for the organization the request is being made by.\n      * @param orderNo - The order number of the order to be modified.\n      * @param paymentInstrumentId - The ID of the payment instrument to be updated.\n      * @param siteId - \n      * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.\n  Below are some valid examples:\n  - en-US\n  - de-AT\n  - de\n  - default\n      * @param headers - An object literal of key value pairs of the headers to be\n      * sent with this request.\n      * @param rawResponse - Set to true to return entire Response object instead of DTO.\n      * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.\n      * \n      */\n      removePaymentInstrumentFromOrder<T extends boolean>(\n        options?: RequireParametersUnlessAllAreOptional<{\n          parameters?: CompositeParameters<{\n            organizationId: string\n            orderNo: string\n            paymentInstrumentId: string\n            siteId: string\n            locale?: string\n          } & { [key in `c_${string}`]: any }, ConfigParameters>,\n          headers?: { [key: string]: string },\n        }>,\n        rawResponse?: T\n      ): Promise<T extends true ? Response : Order>;\n  \n      /**\n      * Removes a payment instrument of an order.\n      *\n      * @param options - An object containing the options for this method.\n      * @param parameters - An object containing the parameters for this method.\n      * @param organizationId - An identifier for the organization the request is being made by.\n      * @param orderNo - The order number of the order to be modified.\n      * @param paymentInstrumentId - The ID of the payment instrument to be updated.\n      * @param siteId - \n      * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.\n  Below are some valid examples:\n  - en-US\n  - de-AT\n  - de\n  - default\n      * @param headers - An object literal of key value pairs of the headers to be\n      * sent with this request.\n      * @param rawResponse - Set to true to return entire Response object instead of DTO.\n      *\n      * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.\n      * \n      */\n      async removePaymentInstrumentFromOrder(\n        options?: RequireParametersUnlessAllAreOptional<{\n          parameters?: CompositeParameters<{\n            organizationId: string\n            orderNo: string\n            paymentInstrumentId: string\n            siteId: string\n            locale?: string\n          } & { [key in `c_${string}`]: any }, ConfigParameters>,\n          headers?: { [key: string]: string },\n        }>,\n        rawResponse?: boolean\n      ): Promise<Response | Order> {\n        const optionParams = options?.parameters || ({} as Partial<NonNullable<NonNullable<typeof options>[\"parameters\"]>>);\n        const configParams = this.clientConfig.parameters;\n  \n        const pathParams: ShopperOrdersPathParameters & Required<BaseUriParameters> = {\n          shortCode: configParams.shortCode,\n          version: configParams.version || \"v1\"\n        };\n        if (optionParams[\"organizationId\"] !== undefined) {\n          pathParams[\"organizationId\"] = optionParams[\"organizationId\"];\n        } else if (configParams[\"organizationId\"] !== undefined) {\n          pathParams[\"organizationId\"] = configParams[\"organizationId\"];\n        }\n        else {\n          throw new Error('Missing required path parameter: organizationId');\n        }\n        if (optionParams[\"orderNo\"] !== undefined) {\n          pathParams[\"orderNo\"] = optionParams[\"orderNo\"];\n        } else if (configParams[\"orderNo\"] !== undefined) {\n          pathParams[\"orderNo\"] = configParams[\"orderNo\"];\n        }\n        else {\n          throw new Error('Missing required path parameter: orderNo');\n        }\n        if (optionParams[\"paymentInstrumentId\"] !== undefined) {\n          pathParams[\"paymentInstrumentId\"] = optionParams[\"paymentInstrumentId\"];\n        } else if (configParams[\"paymentInstrumentId\"] !== undefined) {\n          pathParams[\"paymentInstrumentId\"] = configParams[\"paymentInstrumentId\"];\n        }\n        else {\n          throw new Error('Missing required path parameter: paymentInstrumentId');\n        }\n  \n        const queryParams: ShopperOrdersQueryParameters & { [key in `c_${string}`]: any } = {};\n        if (optionParams[\"siteId\"] !== undefined) {\n          queryParams[\"siteId\"] = optionParams[\"siteId\"];\n        } else if (configParams[\"siteId\"] !== undefined) {\n          queryParams[\"siteId\"] = configParams[\"siteId\"];\n        }\n        else {\n          throw new Error('Missing required query parameter: siteId');\n        }\n        if (optionParams[\"locale\"] !== undefined) {\n          queryParams[\"locale\"] = optionParams[\"locale\"];\n        } else if (configParams[\"locale\"] !== undefined) {\n          queryParams[\"locale\"] = configParams[\"locale\"];\n        }\n  \n        Object.keys(optionParams).forEach((key) => {\n          if(key.startsWith('c_') && optionParams[key as keyof typeof optionParams] !== undefined) {\n            queryParams[key as keyof typeof queryParams] = optionParams[key as keyof typeof optionParams]\n          } else if(!queryParams.hasOwnProperty(key) && !pathParams.hasOwnProperty(key)) {\n            console.warn(`Invalid Parameter for removePaymentInstrumentFromOrder: ${key}`)\n          }\n        })\n  \n        const url = new TemplateURL(\n          \"/organizations/{organizationId}/orders/{orderNo}/payment-instruments/{paymentInstrumentId}\",\n          this.clientConfig.baseUri,\n          {\n            pathParams,\n            queryParams,\n            origin: this.clientConfig.proxy\n          }\n        );\n  \n        const headers: Record<string, string> = {\n          ...this.clientConfig.headers,\n          ...options?.headers\n        };\n  \n        if (!isBrowser) {\n          // Browsers forbid setting a custom user-agent header\n          headers[USER_AGENT_HEADER] = [headers[USER_AGENT_HEADER], USER_AGENT_VALUE].join(\" \");\n        }\n  \n        const response = await doFetch(\n          url.toString(),\n          {\n            method: \"DELETE\",\n            headers,\n            \n          },\n          this.clientConfig,\n          rawResponse\n        )\n  \n        return response as Response | Order;\n      }\n  \n      /**\n      * Updates a payment instrument of an order.\n  \n  Details:\n  \n  The payment instrument is updated with the provided details. The payment method must be applicable for the\n  order see GET /baskets/\\{basketId\\}/payment-methods, if the payment method is 'CREDIT_CARD' a\n  paymentCard must be specified in the request.\n      *\n      * If you would like to get a raw Response object use the other updatePaymentInstrumentForOrder function.\n      *\n      * @param options - An object containing the options for this method.\n      * @param parameters - An object containing the parameters for this method.\n      * @param organizationId - An identifier for the organization the request is being made by.\n      * @param orderNo - The order number of the order to be modified.\n      * @param paymentInstrumentId - The ID of the payment instrument to be updated.\n      * @param siteId - \n      * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.\n  Below are some valid examples:\n  - en-US\n  - de-AT\n  - de\n  - default\n      * @param headers - An object literal of key value pairs of the headers to be\n      * sent with this request.\n      * @param body - The data to send as the request body.\n      *\n      * @returns A promise of type Order.\n      * \n      */\n      updatePaymentInstrumentForOrder(\n        options: RequireParametersUnlessAllAreOptional<{\n          parameters?: CompositeParameters<{\n            organizationId: string\n            orderNo: string\n            paymentInstrumentId: string\n            siteId: string\n            locale?: string\n          } & { [key in `c_${string}`]: any }, ConfigParameters>,\n          headers?: { [key: string]: string },\n          body: OrderPaymentInstrumentRequest\n        }>\n      ): Promise<Order>;\n  \n      /**\n      * Updates a payment instrument of an order.\n  \n  Details:\n  \n  The payment instrument is updated with the provided details. The payment method must be applicable for the\n  order see GET /baskets/\\{basketId\\}/payment-methods, if the payment method is 'CREDIT_CARD' a\n  paymentCard must be specified in the request.\n      *\n      * @param options - An object containing the options for this method.\n      * @param parameters - An object containing the parameters for this method.\n      * @param organizationId - An identifier for the organization the request is being made by.\n      * @param orderNo - The order number of the order to be modified.\n      * @param paymentInstrumentId - The ID of the payment instrument to be updated.\n      * @param siteId - \n      * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.\n  Below are some valid examples:\n  - en-US\n  - de-AT\n  - de\n  - default\n      * @param headers - An object literal of key value pairs of the headers to be\n      * sent with this request.\n      * @param body - The data to send as the request body.\n      * @param rawResponse - Set to true to return entire Response object instead of DTO.\n      * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.\n      * \n      */\n      updatePaymentInstrumentForOrder<T extends boolean>(\n        options: RequireParametersUnlessAllAreOptional<{\n          parameters?: CompositeParameters<{\n            organizationId: string\n            orderNo: string\n            paymentInstrumentId: string\n            siteId: string\n            locale?: string\n          } & { [key in `c_${string}`]: any }, ConfigParameters>,\n          headers?: { [key: string]: string },\n          body: OrderPaymentInstrumentRequest\n        }>,\n        rawResponse?: T\n      ): Promise<T extends true ? Response : Order>;\n  \n      /**\n      * Updates a payment instrument of an order.\n  \n  Details:\n  \n  The payment instrument is updated with the provided details. The payment method must be applicable for the\n  order see GET /baskets/\\{basketId\\}/payment-methods, if the payment method is 'CREDIT_CARD' a\n  paymentCard must be specified in the request.\n      *\n      * @param options - An object containing the options for this method.\n      * @param parameters - An object containing the parameters for this method.\n      * @param organizationId - An identifier for the organization the request is being made by.\n      * @param orderNo - The order number of the order to be modified.\n      * @param paymentInstrumentId - The ID of the payment instrument to be updated.\n      * @param siteId - \n      * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.\n  Below are some valid examples:\n  - en-US\n  - de-AT\n  - de\n  - default\n      * @param headers - An object literal of key value pairs of the headers to be\n      * sent with this request.\n      * @param body - The data to send as the request body.\n      * @param rawResponse - Set to true to return entire Response object instead of DTO.\n      *\n      * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.\n      * \n      */\n      async updatePaymentInstrumentForOrder(\n        options: RequireParametersUnlessAllAreOptional<{\n          parameters?: CompositeParameters<{\n            organizationId: string\n            orderNo: string\n            paymentInstrumentId: string\n            siteId: string\n            locale?: string\n          } & { [key in `c_${string}`]: any }, ConfigParameters>,\n          headers?: { [key: string]: string },\n          body: OrderPaymentInstrumentRequest\n        }>,\n        rawResponse?: boolean\n      ): Promise<Response | Order> {\n        const optionParams = options?.parameters || ({} as Partial<NonNullable<NonNullable<typeof options>[\"parameters\"]>>);\n        const configParams = this.clientConfig.parameters;\n  \n        const pathParams: ShopperOrdersPathParameters & Required<BaseUriParameters> = {\n          shortCode: configParams.shortCode,\n          version: configParams.version || \"v1\"\n        };\n        if (optionParams[\"organizationId\"] !== undefined) {\n          pathParams[\"organizationId\"] = optionParams[\"organizationId\"];\n        } else if (configParams[\"organizationId\"] !== undefined) {\n          pathParams[\"organizationId\"] = configParams[\"organizationId\"];\n        }\n        else {\n          throw new Error('Missing required path parameter: organizationId');\n        }\n        if (optionParams[\"orderNo\"] !== undefined) {\n          pathParams[\"orderNo\"] = optionParams[\"orderNo\"];\n        } else if (configParams[\"orderNo\"] !== undefined) {\n          pathParams[\"orderNo\"] = configParams[\"orderNo\"];\n        }\n        else {\n          throw new Error('Missing required path parameter: orderNo');\n        }\n        if (optionParams[\"paymentInstrumentId\"] !== undefined) {\n          pathParams[\"paymentInstrumentId\"] = optionParams[\"paymentInstrumentId\"];\n        } else if (configParams[\"paymentInstrumentId\"] !== undefined) {\n          pathParams[\"paymentInstrumentId\"] = configParams[\"paymentInstrumentId\"];\n        }\n        else {\n          throw new Error('Missing required path parameter: paymentInstrumentId');\n        }\n  \n        const queryParams: ShopperOrdersQueryParameters & { [key in `c_${string}`]: any } = {};\n        if (optionParams[\"siteId\"] !== undefined) {\n          queryParams[\"siteId\"] = optionParams[\"siteId\"];\n        } else if (configParams[\"siteId\"] !== undefined) {\n          queryParams[\"siteId\"] = configParams[\"siteId\"];\n        }\n        else {\n          throw new Error('Missing required query parameter: siteId');\n        }\n        if (optionParams[\"locale\"] !== undefined) {\n          queryParams[\"locale\"] = optionParams[\"locale\"];\n        } else if (configParams[\"locale\"] !== undefined) {\n          queryParams[\"locale\"] = configParams[\"locale\"];\n        }\n  \n        Object.keys(optionParams).forEach((key) => {\n          if(key.startsWith('c_') && optionParams[key as keyof typeof optionParams] !== undefined) {\n            queryParams[key as keyof typeof queryParams] = optionParams[key as keyof typeof optionParams]\n          } else if(!queryParams.hasOwnProperty(key) && !pathParams.hasOwnProperty(key)) {\n            console.warn(`Invalid Parameter for updatePaymentInstrumentForOrder: ${key}`)\n          }\n        })\n  \n        const url = new TemplateURL(\n          \"/organizations/{organizationId}/orders/{orderNo}/payment-instruments/{paymentInstrumentId}\",\n          this.clientConfig.baseUri,\n          {\n            pathParams,\n            queryParams,\n            origin: this.clientConfig.proxy\n          }\n        );\n  \n        const headers: Record<string, string> = {\n          \"Content-Type\": \"application/json\",\n          ...this.clientConfig.headers,\n          ...options?.headers\n        };\n  \n        if (!isBrowser) {\n          // Browsers forbid setting a custom user-agent header\n          headers[USER_AGENT_HEADER] = [headers[USER_AGENT_HEADER], USER_AGENT_VALUE].join(\" \");\n        }\n  \n        const response = await doFetch(\n          url.toString(),\n          {\n            method: \"PATCH\",\n            headers,\n            body: this.clientConfig.transformRequest(options.body, headers)\n          },\n          this.clientConfig,\n          rawResponse\n        )\n  \n        return response as Response | Order;\n      }\n  \n      /**\n      * Gets the applicable payment methods for an existing order considering the open payment amount only.\n      *\n      * If you would like to get a raw Response object use the other getPaymentMethodsForOrder function.\n      *\n      * @param options - An object containing the options for this method.\n      * @param parameters - An object containing the parameters for this method.\n      * @param organizationId - An identifier for the organization the request is being made by.\n      * @param orderNo - The order number of the order to be modified.\n      * @param siteId - \n      * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.\n  Below are some valid examples:\n  - en-US\n  - de-AT\n  - de\n  - default\n      * @param headers - An object literal of key value pairs of the headers to be\n      * sent with this request.\n      *\n      * @returns A promise of type PaymentMethodResult.\n      * \n      */\n      getPaymentMethodsForOrder(\n        options?: RequireParametersUnlessAllAreOptional<{\n          parameters?: CompositeParameters<{\n            organizationId: string\n            orderNo: string\n            siteId: string\n            locale?: string\n          } & { [key in `c_${string}`]: any }, ConfigParameters>,\n          headers?: { [key: string]: string },\n        }>\n      ): Promise<PaymentMethodResult>;\n  \n      /**\n      * Gets the applicable payment methods for an existing order considering the open payment amount only.\n      *\n      * @param options - An object containing the options for this method.\n      * @param parameters - An object containing the parameters for this method.\n      * @param organizationId - An identifier for the organization the request is being made by.\n      * @param orderNo - The order number of the order to be modified.\n      * @param siteId - \n      * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.\n  Below are some valid examples:\n  - en-US\n  - de-AT\n  - de\n  - default\n      * @param headers - An object literal of key value pairs of the headers to be\n      * sent with this request.\n      * @param rawResponse - Set to true to return entire Response object instead of DTO.\n      * @returns A promise of type Response if rawResponse is true, a promise of type PaymentMethodResult otherwise.\n      * \n      */\n      getPaymentMethodsForOrder<T extends boolean>(\n        options?: RequireParametersUnlessAllAreOptional<{\n          parameters?: CompositeParameters<{\n            organizationId: string\n            orderNo: string\n            siteId: string\n            locale?: string\n          } & { [key in `c_${string}`]: any }, ConfigParameters>,\n          headers?: { [key: string]: string },\n        }>,\n        rawResponse?: T\n      ): Promise<T extends true ? Response : PaymentMethodResult>;\n  \n      /**\n      * Gets the applicable payment methods for an existing order considering the open payment amount only.\n      *\n      * @param options - An object containing the options for this method.\n      * @param parameters - An object containing the parameters for this method.\n      * @param organizationId - An identifier for the organization the request is being made by.\n      * @param orderNo - The order number of the order to be modified.\n      * @param siteId - \n      * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.\n  Below are some valid examples:\n  - en-US\n  - de-AT\n  - de\n  - default\n      * @param headers - An object literal of key value pairs of the headers to be\n      * sent with this request.\n      * @param rawResponse - Set to true to return entire Response object instead of DTO.\n      *\n      * @returns A promise of type Response if rawResponse is true, a promise of type PaymentMethodResult otherwise.\n      * \n      */\n      async getPaymentMethodsForOrder(\n        options?: RequireParametersUnlessAllAreOptional<{\n          parameters?: CompositeParameters<{\n            organizationId: string\n            orderNo: string\n            siteId: string\n            locale?: string\n          } & { [key in `c_${string}`]: any }, ConfigParameters>,\n          headers?: { [key: string]: string },\n        }>,\n        rawResponse?: boolean\n      ): Promise<Response | PaymentMethodResult> {\n        const optionParams = options?.parameters || ({} as Partial<NonNullable<NonNullable<typeof options>[\"parameters\"]>>);\n        const configParams = this.clientConfig.parameters;\n  \n        const pathParams: ShopperOrdersPathParameters & Required<BaseUriParameters> = {\n          shortCode: configParams.shortCode,\n          version: configParams.version || \"v1\"\n        };\n        if (optionParams[\"organizationId\"] !== undefined) {\n          pathParams[\"organizationId\"] = optionParams[\"organizationId\"];\n        } else if (configParams[\"organizationId\"] !== undefined) {\n          pathParams[\"organizationId\"] = configParams[\"organizationId\"];\n        }\n        else {\n          throw new Error('Missing required path parameter: organizationId');\n        }\n        if (optionParams[\"orderNo\"] !== undefined) {\n          pathParams[\"orderNo\"] = optionParams[\"orderNo\"];\n        } else if (configParams[\"orderNo\"] !== undefined) {\n          pathParams[\"orderNo\"] = configParams[\"orderNo\"];\n        }\n        else {\n          throw new Error('Missing required path parameter: orderNo');\n        }\n  \n        const queryParams: ShopperOrdersQueryParameters & { [key in `c_${string}`]: any } = {};\n        if (optionParams[\"siteId\"] !== undefined) {\n          queryParams[\"siteId\"] = optionParams[\"siteId\"];\n        } else if (configParams[\"siteId\"] !== undefined) {\n          queryParams[\"siteId\"] = configParams[\"siteId\"];\n        }\n        else {\n          throw new Error('Missing required query parameter: siteId');\n        }\n        if (optionParams[\"locale\"] !== undefined) {\n          queryParams[\"locale\"] = optionParams[\"locale\"];\n        } else if (configParams[\"locale\"] !== undefined) {\n          queryParams[\"locale\"] = configParams[\"locale\"];\n        }\n  \n        Object.keys(optionParams).forEach((key) => {\n          if(key.startsWith('c_') && optionParams[key as keyof typeof optionParams] !== undefined) {\n            queryParams[key as keyof typeof queryParams] = optionParams[key as keyof typeof optionParams]\n          } else if(!queryParams.hasOwnProperty(key) && !pathParams.hasOwnProperty(key)) {\n            console.warn(`Invalid Parameter for getPaymentMethodsForOrder: ${key}`)\n          }\n        })\n  \n        const url = new TemplateURL(\n          \"/organizations/{organizationId}/orders/{orderNo}/payment-methods\",\n          this.clientConfig.baseUri,\n          {\n            pathParams,\n            queryParams,\n            origin: this.clientConfig.proxy\n          }\n        );\n  \n        const headers: Record<string, string> = {\n          ...this.clientConfig.headers,\n          ...options?.headers\n        };\n  \n        if (!isBrowser) {\n          // Browsers forbid setting a custom user-agent header\n          headers[USER_AGENT_HEADER] = [headers[USER_AGENT_HEADER], USER_AGENT_VALUE].join(\" \");\n        }\n  \n        const response = await doFetch(\n          url.toString(),\n          {\n            method: \"GET\",\n            headers,\n            \n          },\n          this.clientConfig,\n          rawResponse\n        )\n  \n        return response as Response | PaymentMethodResult;\n      }\n  \n      /**\n      * This method gives you the external taxation data of the order transferred from the basket during \n  order creation. This endpoint can be called only if external taxation was used. See POST /baskets \n  for more information.         \n      *\n      * If you would like to get a raw Response object use the other getTaxesFromOrder function.\n      *\n      * @param options - An object containing the options for this method.\n      * @param parameters - An object containing the parameters for this method.\n      * @param organizationId - An identifier for the organization the request is being made by.\n      * @param orderNo - The order number of the order to be modified.\n      * @param siteId - \n      * @param headers - An object literal of key value pairs of the headers to be\n      * sent with this request.\n      *\n      * @returns A promise of type Taxes.\n      * \n      */\n      getTaxesFromOrder(\n        options?: RequireParametersUnlessAllAreOptional<{\n          parameters?: CompositeParameters<{\n            organizationId: string\n            orderNo: string\n            siteId: string\n          } & { [key in `c_${string}`]: any }, ConfigParameters>,\n          headers?: { [key: string]: string },\n        }>\n      ): Promise<Taxes>;\n  \n      /**\n      * This method gives you the external taxation data of the order transferred from the basket during \n  order creation. This endpoint can be called only if external taxation was used. See POST /baskets \n  for more information.         \n      *\n      * @param options - An object containing the options for this method.\n      * @param parameters - An object containing the parameters for this method.\n      * @param organizationId - An identifier for the organization the request is being made by.\n      * @param orderNo - The order number of the order to be modified.\n      * @param siteId - \n      * @param headers - An object literal of key value pairs of the headers to be\n      * sent with this request.\n      * @param rawResponse - Set to true to return entire Response object instead of DTO.\n      * @returns A promise of type Response if rawResponse is true, a promise of type Taxes otherwise.\n      * \n      */\n      getTaxesFromOrder<T extends boolean>(\n        options?: RequireParametersUnlessAllAreOptional<{\n          parameters?: CompositeParameters<{\n            organizationId: string\n            orderNo: string\n            siteId: string\n          } & { [key in `c_${string}`]: any }, ConfigParameters>,\n          headers?: { [key: string]: string },\n        }>,\n        rawResponse?: T\n      ): Promise<T extends true ? Response : Taxes>;\n  \n      /**\n      * This method gives you the external taxation data of the order transferred from the basket during \n  order creation. This endpoint can be called only if external taxation was used. See POST /baskets \n  for more information.         \n      *\n      * @param options - An object containing the options for this method.\n      * @param parameters - An object containing the parameters for this method.\n      * @param organizationId - An identifier for the organization the request is being made by.\n      * @param orderNo - The order number of the order to be modified.\n      * @param siteId - \n      * @param headers - An object literal of key value pairs of the headers to be\n      * sent with this request.\n      * @param rawResponse - Set to true to return entire Response object instead of DTO.\n      *\n      * @returns A promise of type Response if rawResponse is true, a promise of type Taxes otherwise.\n      * \n      */\n      async getTaxesFromOrder(\n        options?: RequireParametersUnlessAllAreOptional<{\n          parameters?: CompositeParameters<{\n            organizationId: string\n            orderNo: string\n            siteId: string\n          } & { [key in `c_${string}`]: any }, ConfigParameters>,\n          headers?: { [key: string]: string },\n        }>,\n        rawResponse?: boolean\n      ): Promise<Response | Taxes> {\n        const optionParams = options?.parameters || ({} as Partial<NonNullable<NonNullable<typeof options>[\"parameters\"]>>);\n        const configParams = this.clientConfig.parameters;\n  \n        const pathParams: ShopperOrdersPathParameters & Required<BaseUriParameters> = {\n          shortCode: configParams.shortCode,\n          version: configParams.version || \"v1\"\n        };\n        if (optionParams[\"organizationId\"] !== undefined) {\n          pathParams[\"organizationId\"] = optionParams[\"organizationId\"];\n        } else if (configParams[\"organizationId\"] !== undefined) {\n          pathParams[\"organizationId\"] = configParams[\"organizationId\"];\n        }\n        else {\n          throw new Error('Missing required path parameter: organizationId');\n        }\n        if (optionParams[\"orderNo\"] !== undefined) {\n          pathParams[\"orderNo\"] = optionParams[\"orderNo\"];\n        } else if (configParams[\"orderNo\"] !== undefined) {\n          pathParams[\"orderNo\"] = configParams[\"orderNo\"];\n        }\n        else {\n          throw new Error('Missing required path parameter: orderNo');\n        }\n  \n        const queryParams: ShopperOrdersQueryParameters & { [key in `c_${string}`]: any } = {};\n        if (optionParams[\"siteId\"] !== undefined) {\n          queryParams[\"siteId\"] = optionParams[\"siteId\"];\n        } else if (configParams[\"siteId\"] !== undefined) {\n          queryParams[\"siteId\"] = configParams[\"siteId\"];\n        }\n        else {\n          throw new Error('Missing required query parameter: siteId');\n        }\n  \n        Object.keys(optionParams).forEach((key) => {\n          if(key.startsWith('c_') && optionParams[key as keyof typeof optionParams] !== undefined) {\n            queryParams[key as keyof typeof queryParams] = optionParams[key as keyof typeof optionParams]\n          } else if(!queryParams.hasOwnProperty(key) && !pathParams.hasOwnProperty(key)) {\n            console.warn(`Invalid Parameter for getTaxesFromOrder: ${key}`)\n          }\n        })\n  \n        const url = new TemplateURL(\n          \"/organizations/{organizationId}/orders/{orderNo}/taxes\",\n          this.clientConfig.baseUri,\n          {\n            pathParams,\n            queryParams,\n            origin: this.clientConfig.proxy\n          }\n        );\n  \n        const headers: Record<string, string> = {\n          ...this.clientConfig.headers,\n          ...options?.headers\n        };\n  \n        if (!isBrowser) {\n          // Browsers forbid setting a custom user-agent header\n          headers[USER_AGENT_HEADER] = [headers[USER_AGENT_HEADER], USER_AGENT_VALUE].join(\" \");\n        }\n  \n        const response = await doFetch(\n          url.toString(),\n          {\n            method: \"GET\",\n            headers,\n            \n          },\n          this.clientConfig,\n          rawResponse\n        )\n  \n        return response as Response | Taxes;\n      }\n}\n"],"mappings":"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","names":[]}