{"version":3,"sources":["../../src/helpers/index.ts","../../src/config.ts","../../src/templateUrl.ts","../../src/responseError.ts","../../src/helpers/environment.ts","../../src/helpers/fetchHelper.ts","../../src/helpers/customApi.ts"],"sourcesContent":["/*\n * Copyright (c) 2022, Salesforce, Inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n// This file should not be used for internal package imports.\n// Doing so may lead to circular dependencies or duplicate exports (due to rollup mangling the types)\nexport * from './customApi';\nexport * from './environment';\nexport * from './fetchHelper';\nexport * from './types';\n\n","/*\n * Copyright (c) 2024, Salesforce, Inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n// eslint-disable-next-line import/prefer-default-export\nexport const CUSTOM_API_DEFAULT_BASE_URI =\n  'https://{shortCode}.api.commercecloud.salesforce.com/custom/{apiName}/{apiVersion}';\n","/*\n * Copyright (c) 2020, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport type {PathParameters, QueryParameters} from './helpers/types';\n\nexport default class TemplateURL extends URL {\n  /**\n   * @param url -\n   * @param base -\n   */\n  constructor(\n    url: string,\n    base: string,\n    parameters?: {\n      pathParams?: PathParameters;\n      queryParams?: QueryParameters;\n      origin?: string;\n    }\n  ) {\n    super(\n      TemplateURL.renderTemplateUri(\n        `${base}/${url}`.replace(/\\/\\/+/g, '/'),\n        parameters?.pathParams\n      )\n    );\n    this.addQueryParams(parameters?.queryParams);\n    if (parameters?.origin) {\n      this.replaceOrigin(parameters?.origin);\n    }\n  }\n\n  /**\n   * Replace the origin (protocol/host) portion of the URL with a new origin.\n   * The path portion is retained and concatenated with any path included in the\n   * new origin. Thee primary use of this function is to use a proxy.\n   *\n   * @param newOriginString - The new origin to substitute (ex: https://example.com)\n   */\n  replaceOrigin(newOriginString: string): void {\n    const newOriginUrl = new URL(newOriginString);\n    this.protocol = newOriginUrl.protocol;\n    this.host = newOriginUrl.host;\n    this.pathname = `${newOriginUrl.pathname}/${this.pathname}`.replace(\n      /\\/\\/+/g,\n      '/'\n    );\n  }\n\n  /**\n   * Add append an object literal of query parameters to the URL object. SCAPI expects\n   * Arrays to be comma separated where \\{ a: [\"1\", \"2\"] \\} becomes ?a=1,2.\n   * The 'refine' query parameter is an exception, where SCAPI expects the the \"repeat\"\n   * convention where \\{ refine: [\"1\", \"2\"] \\} becomes \"?refine=1&refine=2\"\n   */\n  addQueryParams(queryParams?: QueryParameters): void {\n    if (queryParams) {\n      Object.keys(queryParams).forEach(key => {\n        const param = queryParams[key];\n        if (Array.isArray(param)) {\n          if (key === 'refine') {\n            for (let i = 0; i < param.length; i += 1) {\n              this.searchParams.append(key, String(param[i]));\n            }\n          } else {\n            this.searchParams.append(key, param.join());\n          }\n        } else {\n          this.searchParams.append(key, String(param));\n        }\n      });\n    }\n  }\n\n  /**\n   * Replace bracketed URL template parameters with values from parameters object\n   *\n   * @param template - The URL template string to make substitutions in\n   * @param parameters - The object literal that provides the values to substitute\n   *\n   * @returns String URL with substitutions made\n   */\n  static renderTemplateUri(\n    template: string,\n    parameters?: PathParameters\n  ): string {\n    return parameters\n      ? template.replace(\n          /\\{([^\\}]+)\\}/g /* eslint-disable-line no-useless-escape */,\n          (match, param: string) => String(parameters[param])\n        )\n      : template;\n  }\n}\n","/*\n * Copyright (c) 2022, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * Extends the Error class with the the error being a combination of status code\n * and text retrieved from the response.\n *\n * @class ResponseError\n * @extends Error\n */\nexport default class ResponseError extends Error {\n  constructor(public response: Response) {\n    super(`${response.status} ${response.statusText}`);\n  }\n}\n","/*\n * Copyright (c) 2023, Salesforce, Inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport type { FetchFunction } from \"../clientConfig\";\n\n/*\n * Copyright (c) 2022, Salesforce, Inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nexport const isBrowser =\n  typeof window === \"object\" && typeof window.document === \"object\";\n\nexport const globalObject = isBrowser ? window : globalThis;\n\nexport const hasFetchAvailable = typeof globalObject.fetch === \"function\";\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\nexport const fetch: FetchFunction = (() => {\n  return globalObject.fetch;\n})();\n","/*\n * Copyright (c) 2024, Salesforce, Inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport { BaseUriParameters } from '.';\nimport type { FetchOptions } from '../clientConfig';\nimport { ClientConfigInit } from '../clientConfig';\nimport ResponseError from '../responseError';\nimport { fetch } from './environment';\n\n/**\n * A wrapper function around fetch designed for making requests using the SDK\n * @param url - The url of the resource that you wish to fetch\n * @param options? - An object containing any custom settings you want to apply to the request\n * @param options.method? - The request HTTP operation. 'GET' is the default if no method is provided.\n * @param options.headers? - Headers that are added to the request. Authorization header should be in this argument or in the clientConfig.headers\n * @param options.body? - Body that is used for the request\n * @param clientConfig? - Client Configuration object used by the SDK with properties that can affect the fetch call\n * @param clientConfig.headers? - Additional headers that are added to the request. Authorization header should be in this argument or in the options?.headers. options?.headers will override any duplicate properties.\n * @param clientConfig.fetchOptions? - fetchOptions that are passed onto the fetch request\n * @param clientConfig.throwOnBadResponse? - flag that when set true will throw a response error if the fetch request fails\n * @param rawResponse? - Flag to return the raw response from the fetch call. True for raw response object, false for the data from the response\n * @returns Raw response or data from response based on rawResponse argument from fetch call\n */\n// eslint-disable-next-line import/prefer-default-export\nexport const doFetch = async <Params extends BaseUriParameters>(\n  url: string,\n  options?: {\n    method?: string;\n    headers?: {\n      authorization?: string;\n    } & {[key: string]: string};\n    body?: BodyInit | globalThis.BodyInit | unknown;\n  },\n  clientConfig?: ClientConfigInit<Params>,\n  rawResponse?: boolean\n): Promise<Response | unknown> => {\n  const headers: Record<string, string> = {\n    ...clientConfig?.headers,\n    ...options?.headers,\n  };\n\n  const requestOptions: FetchOptions = {\n    ...clientConfig?.fetchOptions,\n    headers,\n    body: options?.body as\n      | (BodyInit & (globalThis.BodyInit | null))\n      | undefined,\n    method: options?.method ?? 'GET',\n  };\n\n  const response = await fetch(url, requestOptions);\n  if (rawResponse) {\n    return response;\n  }\n  if (\n    clientConfig?.throwOnBadResponse &&\n    !response.ok &&\n    response.status !== 304\n  ) {\n    throw new ResponseError(response);\n  } else {\n    const text = await response.text();\n    // It's ideal to get \"{}\" for an empty response body, but we won't throw if it's truly empty\n    return (text ? JSON.parse(text) : {}) as unknown | Response;\n  }\n};\n","/*\n * Copyright (c) 2024, Salesforce, Inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport { ClientConfigInit } from '../clientConfig';\nimport { CUSTOM_API_DEFAULT_BASE_URI } from '../config';\nimport TemplateURL from '../templateUrl';\nimport { doFetch } from './fetchHelper';\nimport { PathParameters } from './types';\n\n// Helper method to find Content Type header\n// returns true if it exists, false otherwise\nconst contentTypeHeaderExists = (\n  headers: Record<string, string> | undefined\n) => {\n  let foundHeader = false;\n  if (headers) {\n    foundHeader = Boolean(\n      Object.keys(headers).find(key => key.toLowerCase() === 'content-type')\n    );\n  }\n  return foundHeader;\n};\n\nexport interface CustomParams {\n  apiName?: string;\n  apiVersion?: string;\n  endpointPath?: string;\n  organizationId?: string;\n  shortCode: string;\n  [key: string]: unknown;\n}\n\n/**\n * A helper function designed to make calls to a custom API endpoint\n * For more information about custom APIs, please refer to the [API documentation](https://developer.salesforce.com/docs/commerce/commerce-api/guide/custom-apis.html)\n * @param args - Argument object containing data used for custom API request\n * @param args.options - An object containing any custom settings you want to apply to the request\n * @param args.options.method? - The request HTTP operation. 'GET' is the default if no method is provided.\n * @param args.options.parameters? - Query parameters that are added to the request\n * @param args.options.customApiPathParameters? - Path parameters used for custom API. Required path parameters (apiName, endpointPath, organizationId, and shortCode) can be in this object, or args.clientConfig.parameters. apiVersion is defaulted to 'v1' if not provided.\n * @param args.options.headers? - Headers that are added to the request. Authorization header should be in this parameter or in the clientConfig.headers. If \"Content-Type\" is not provided in either header, it will be defaulted to \"application/json\".\n * @param args.options.body? - Body that is used for the request\n * @param args.clientConfig - Client Configuration object used by the SDK with properties that can affect the fetch call\n * @param args.clientConfig.parameters - Path parameters used for custom API endpoints. The required properties are: apiName, endpointPath, organizationId, and shortCode. An error will be thrown if these are not provided.\n * @param args.clientConfig.headers? - Additional headers that are added to the request. Authorization header should be in this argument or in the options?.headers. options?.headers will override any duplicate properties. If \"Content-Type\" is not provided in either header, it will be defaulted to \"application/json\".\n * @param args.clientConfig.baseUri? - baseUri used for the request, where the path parameters are wrapped in curly braces. Default value is 'https://{shortCode}.api.commercecloud.salesforce.com/custom/{apiName}/{apiVersion}'\n * @param args.clientConfig.fetchOptions? - fetchOptions that are passed onto the fetch request\n * @param args.clientConfig.throwOnBadResponse? - flag that when set true will throw a response error if the fetch request fails (returns with a status code outside the range of 200-299 or 304 redirect)\n * @param args.clientConfig.proxy? - Routes API calls through a proxy when set\n * @param args.rawResponse? - Flag to return the raw response from the fetch call. True for raw response object, false for the data from the response\n * @returns Raw response or data from response based on rawResponse argument from fetch call\n */\nexport const callCustomEndpoint = async (args: {\n  options: {\n    method?: string;\n    parameters?: {\n      [key: string]: string | number | boolean | string[] | number[];\n    };\n    customApiPathParameters?: {\n      apiName?: string;\n      apiVersion?: string;\n      endpointPath?: string;\n      organizationId?: string;\n      shortCode?: string;\n    };\n    headers?: {\n      authorization?: string;\n    } & {[key: string]: string};\n    body?: BodyInit | globalThis.BodyInit | unknown;\n  };\n  clientConfig: ClientConfigInit<CustomParams>;\n  rawResponse?: boolean;\n}): Promise<Response | unknown> => {\n  const {options, clientConfig, rawResponse} = args;\n\n  const requiredArgs = [\n    'apiName',\n    'endpointPath',\n    'organizationId',\n    'shortCode',\n  ];\n\n  const pathParams: Record<string, unknown> = {\n    ...clientConfig.parameters,\n    ...options?.customApiPathParameters,\n  };\n\n  requiredArgs.forEach(arg => {\n    if (!pathParams[arg]) {\n      throw new Error(\n        `Missing required property needed in options.customApiPathParameters or clientConfig.parameters: ${arg}`\n      );\n    }\n  });\n\n  if (!pathParams.apiVersion) {\n    pathParams.apiVersion = 'v1';\n  }\n\n  let clientConfigCopy = clientConfig;\n  if (!clientConfig.baseUri) {\n    clientConfigCopy = {\n      ...clientConfig,\n      baseUri: CUSTOM_API_DEFAULT_BASE_URI,\n    };\n  }\n\n  // Use siteId from clientConfig if it is not defined in options and is available in clientConfig\n  const useSiteId = Boolean(\n    !options.parameters?.siteId && clientConfig?.parameters?.siteId\n  );\n  const contentTypeExists =\n    contentTypeHeaderExists(options.headers) ||\n    contentTypeHeaderExists(clientConfigCopy.headers);\n\n  let optionsCopy = options;\n\n  if (!contentTypeExists || useSiteId) {\n    optionsCopy = {\n      ...options,\n      headers: {\n        ...options.headers,\n        // If Content-Type header does not exist, we default to \"Content-Type\": \"application/json\"\n        ...(!contentTypeExists && {'Content-Type': 'application/json'}),\n      },\n      parameters: {\n        ...options.parameters,\n        ...(useSiteId && {siteId: clientConfig.parameters.siteId as string}),\n      },\n    };\n  }\n\n  const url = new TemplateURL(\n    '/organizations/{organizationId}/{endpointPath}',\n    clientConfigCopy.baseUri as string,\n    {\n      pathParams: pathParams as PathParameters,\n      queryParams: optionsCopy.parameters,\n      origin: clientConfigCopy.proxy,\n    }\n  );\n\n  return doFetch(url.toString(), optionsCopy, clientConfigCopy, rawResponse);\n};\n"],"mappings":"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","names":[]}